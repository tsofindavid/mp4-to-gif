{"ast":null,"code":"import { joinCdnOperations } from '../../../../utils/cdn-utils.js';\nimport { stringToArray } from '../../../../utils/stringToArray.js';\nexport const OPERATIONS_ZEROS = {\n  brightness: 0,\n  exposure: 0,\n  gamma: 100,\n  contrast: 0,\n  saturation: 0,\n  vibrance: 0,\n  warmth: 0,\n  enhance: 0,\n  filter: 0,\n  rotate: 0\n};\n\n/**\n * @param {String} operation\n * @param {Number | String | object} options\n * @returns {String}\n */\nfunction transformationToStr(operation, options) {\n  if (typeof options === 'number') {\n    return OPERATIONS_ZEROS[operation] !== options ? `${operation}/${options}` : '';\n  }\n  if (typeof options === 'boolean') {\n    return options && OPERATIONS_ZEROS[operation] !== options ? `${operation}` : '';\n  }\n  if (operation === 'filter') {\n    if (!options || OPERATIONS_ZEROS[operation] === options.amount) {\n      return '';\n    }\n    let {\n      name,\n      amount\n    } = options;\n    return `${operation}/${name}/${amount}`;\n  }\n  if (operation === 'crop') {\n    if (!options) {\n      return '';\n    }\n    let {\n      dimensions,\n      coords\n    } = options;\n    return `${operation}/${dimensions.join('x')}/${coords.join(',')}`;\n  }\n  return '';\n}\n\n// TODO: refactor all the operations constants\nconst SUPPORTED_OPERATIONS_ORDERED = ['enhance', 'brightness', 'exposure', 'gamma', 'contrast', 'saturation', 'vibrance', 'warmth', 'filter', 'mirror', 'flip', 'rotate', 'crop'];\n\n/**\n * @param {import('../types').Transformations} transformations\n * @returns {String}\n */\nexport function transformationsToOperations(transformations) {\n  return joinCdnOperations(...SUPPORTED_OPERATIONS_ORDERED.filter(operation => typeof transformations[operation] !== 'undefined' && transformations[operation] !== null).map(operation => {\n    let options = transformations[operation];\n    return transformationToStr(operation, options);\n  }).filter(str => !!str));\n}\nexport const COMMON_OPERATIONS = joinCdnOperations('format/auto', 'progressive/yes');\nconst asNumber = ([value]) => typeof value !== 'undefined' ? Number(value) : undefined;\nconst asBoolean = () => true;\nconst asFilter = ([name, amount]) => ({\n  name,\n  amount: typeof amount !== 'undefined' ? Number(amount) : 100\n});\n\n// Docs: https://uploadcare.com/docs/transformations/image/resize-crop/#operation-crop\n// We don't support percentages and aligment presets,\n// Because it's unclear how to handle them in the Editor UI\n// TODO: add support for percentages and aligment presets\nconst asCrop = ([dimensions, coords]) => {\n  return {\n    dimensions: stringToArray(dimensions, 'x').map(Number),\n    coords: stringToArray(coords).map(Number)\n  };\n};\nconst OPERATION_PROCESSORS = {\n  enhance: asNumber,\n  brightness: asNumber,\n  exposure: asNumber,\n  gamma: asNumber,\n  contrast: asNumber,\n  saturation: asNumber,\n  vibrance: asNumber,\n  warmth: asNumber,\n  filter: asFilter,\n  mirror: asBoolean,\n  flip: asBoolean,\n  rotate: asNumber,\n  crop: asCrop\n};\n\n/**\n * @param {string[]} operations\n * @returns {import('../types.js').Transformations}\n */\nexport function operationsToTransformations(operations) {\n  /** @type {import('../types.js').Transformations} */\n  let transformations = {};\n  for (let operation of operations) {\n    let [name, ...args] = operation.split('/');\n    if (!SUPPORTED_OPERATIONS_ORDERED.includes(name)) {\n      continue;\n    }\n    const processor = OPERATION_PROCESSORS[name];\n    const value = processor(args);\n    transformations[name] = value;\n  }\n  return transformations;\n}","map":{"version":3,"names":["joinCdnOperations","stringToArray","OPERATIONS_ZEROS","brightness","exposure","gamma","contrast","saturation","vibrance","warmth","enhance","filter","rotate","transformationToStr","operation","options","amount","name","dimensions","coords","join","SUPPORTED_OPERATIONS_ORDERED","transformationsToOperations","transformations","map","str","COMMON_OPERATIONS","asNumber","value","Number","undefined","asBoolean","asFilter","asCrop","OPERATION_PROCESSORS","mirror","flip","crop","operationsToTransformations","operations","args","split","includes","processor"],"sources":["/Users/David/Documents/own_projects/mp4-to-gif/node_modules/@uploadcare/blocks/blocks/CloudImageEditor/src/lib/transformationUtils.js"],"sourcesContent":["import { joinCdnOperations } from '../../../../utils/cdn-utils.js';\nimport { stringToArray } from '../../../../utils/stringToArray.js';\n\nexport const OPERATIONS_ZEROS = {\n  brightness: 0,\n  exposure: 0,\n  gamma: 100,\n  contrast: 0,\n  saturation: 0,\n  vibrance: 0,\n  warmth: 0,\n  enhance: 0,\n  filter: 0,\n  rotate: 0,\n};\n\n/**\n * @param {String} operation\n * @param {Number | String | object} options\n * @returns {String}\n */\nfunction transformationToStr(operation, options) {\n  if (typeof options === 'number') {\n    return OPERATIONS_ZEROS[operation] !== options ? `${operation}/${options}` : '';\n  }\n\n  if (typeof options === 'boolean') {\n    return options && OPERATIONS_ZEROS[operation] !== options ? `${operation}` : '';\n  }\n\n  if (operation === 'filter') {\n    if (!options || OPERATIONS_ZEROS[operation] === options.amount) {\n      return '';\n    }\n    let { name, amount } = options;\n    return `${operation}/${name}/${amount}`;\n  }\n\n  if (operation === 'crop') {\n    if (!options) {\n      return '';\n    }\n    let { dimensions, coords } = options;\n    return `${operation}/${dimensions.join('x')}/${coords.join(',')}`;\n  }\n\n  return '';\n}\n\n// TODO: refactor all the operations constants\nconst SUPPORTED_OPERATIONS_ORDERED = [\n  'enhance',\n  'brightness',\n  'exposure',\n  'gamma',\n  'contrast',\n  'saturation',\n  'vibrance',\n  'warmth',\n  'filter',\n  'mirror',\n  'flip',\n  'rotate',\n  'crop',\n];\n\n/**\n * @param {import('../types').Transformations} transformations\n * @returns {String}\n */\nexport function transformationsToOperations(transformations) {\n  return joinCdnOperations(\n    ...SUPPORTED_OPERATIONS_ORDERED.filter(\n      (operation) => typeof transformations[operation] !== 'undefined' && transformations[operation] !== null\n    )\n      .map((operation) => {\n        let options = transformations[operation];\n        return transformationToStr(operation, options);\n      })\n      .filter((str) => !!str)\n  );\n}\n\nexport const COMMON_OPERATIONS = joinCdnOperations('format/auto', 'progressive/yes');\n\nconst asNumber = ([value]) => (typeof value !== 'undefined' ? Number(value) : undefined);\nconst asBoolean = () => true;\nconst asFilter = ([name, amount]) => ({\n  name,\n  amount: typeof amount !== 'undefined' ? Number(amount) : 100,\n});\n\n// Docs: https://uploadcare.com/docs/transformations/image/resize-crop/#operation-crop\n// We don't support percentages and aligment presets,\n// Because it's unclear how to handle them in the Editor UI\n// TODO: add support for percentages and aligment presets\nconst asCrop = ([dimensions, coords]) => {\n  return { dimensions: stringToArray(dimensions, 'x').map(Number), coords: stringToArray(coords).map(Number) };\n};\n\nconst OPERATION_PROCESSORS = {\n  enhance: asNumber,\n  brightness: asNumber,\n  exposure: asNumber,\n  gamma: asNumber,\n  contrast: asNumber,\n  saturation: asNumber,\n  vibrance: asNumber,\n  warmth: asNumber,\n  filter: asFilter,\n  mirror: asBoolean,\n  flip: asBoolean,\n  rotate: asNumber,\n  crop: asCrop,\n};\n\n/**\n * @param {string[]} operations\n * @returns {import('../types.js').Transformations}\n */\nexport function operationsToTransformations(operations) {\n  /** @type {import('../types.js').Transformations} */\n  let transformations = {};\n  for (let operation of operations) {\n    let [name, ...args] = operation.split('/');\n    if (!SUPPORTED_OPERATIONS_ORDERED.includes(name)) {\n      continue;\n    }\n    const processor = OPERATION_PROCESSORS[name];\n    const value = processor(args);\n    transformations[name] = value;\n  }\n  return transformations;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/** @typedef {{ [key: String]: String | Number | Boolean | InputData }} InputData */\n\nconst DEFAULT_TRANSFORMER = value => value;\nconst OPEN_TOKEN = '{{';\nconst CLOSE_TOKEN = '}}';\nconst PLURAL_PREFIX = 'plural:';\n\n/**\n * @typedef {Object} Options\n * @property {String} [openToken='{{'] Default is `'{{'`\n * @property {String} [closeToken='}}'] Default is `'}}'`\n * @property {(value: String) => String} [transform=DEFAULT_TRANSFORMER] Default is `DEFAULT_TRANSFORMER`\n */\n\n/**\n * @param {String} template\n * @param {InputData} [data={}] Default is `{}`\n * @param {Options} [options={}] Default is `{}`\n * @returns {String}\n */\nexport function applyTemplateData(template, data, options = {}) {\n  let {\n    openToken = OPEN_TOKEN,\n    closeToken = CLOSE_TOKEN,\n    transform = DEFAULT_TRANSFORMER\n  } = options;\n  for (let key in data) {\n    let value = data[key]?.toString();\n    template = template.replaceAll(openToken + key + closeToken, typeof value === 'string' ? transform(value) : value);\n  }\n  return template;\n}\n\n/**\n * @param {String} template\n * @returns {{ variable: string; pluralKey: string; countVariable: string }[]}\n */\nexport function getPluralObjects(template) {\n  const pluralObjects = [];\n  let open = template.indexOf(OPEN_TOKEN);\n  while (open !== -1) {\n    const close = template.indexOf(CLOSE_TOKEN, open);\n    const variable = template.substring(open + 2, close);\n    if (variable.startsWith(PLURAL_PREFIX)) {\n      const keyValue = template.substring(open + 2, close).replace(PLURAL_PREFIX, '');\n      const key = keyValue.substring(0, keyValue.indexOf('('));\n      const count = keyValue.substring(keyValue.indexOf('(') + 1, keyValue.indexOf(')'));\n      pluralObjects.push({\n        variable,\n        pluralKey: key,\n        countVariable: count\n      });\n    }\n    open = template.indexOf(OPEN_TOKEN, close);\n  }\n  return pluralObjects;\n}","map":{"version":3,"names":["DEFAULT_TRANSFORMER","value","OPEN_TOKEN","CLOSE_TOKEN","PLURAL_PREFIX","applyTemplateData","template","data","options","openToken","closeToken","transform","key","toString","replaceAll","getPluralObjects","pluralObjects","open","indexOf","close","variable","substring","startsWith","keyValue","replace","count","push","pluralKey","countVariable"],"sources":["/Users/David/Documents/own_projects/mp4-to-gif/node_modules/@uploadcare/blocks/utils/template-utils.js"],"sourcesContent":["/** @typedef {{ [key: String]: String | Number | Boolean | InputData }} InputData */\n\nconst DEFAULT_TRANSFORMER = (value) => value;\nconst OPEN_TOKEN = '{{';\nconst CLOSE_TOKEN = '}}';\nconst PLURAL_PREFIX = 'plural:';\n\n/**\n * @typedef {Object} Options\n * @property {String} [openToken='{{'] Default is `'{{'`\n * @property {String} [closeToken='}}'] Default is `'}}'`\n * @property {(value: String) => String} [transform=DEFAULT_TRANSFORMER] Default is `DEFAULT_TRANSFORMER`\n */\n\n/**\n * @param {String} template\n * @param {InputData} [data={}] Default is `{}`\n * @param {Options} [options={}] Default is `{}`\n * @returns {String}\n */\nexport function applyTemplateData(template, data, options = {}) {\n  let { openToken = OPEN_TOKEN, closeToken = CLOSE_TOKEN, transform = DEFAULT_TRANSFORMER } = options;\n\n  for (let key in data) {\n    let value = data[key]?.toString();\n    template = template.replaceAll(openToken + key + closeToken, typeof value === 'string' ? transform(value) : value);\n  }\n  return template;\n}\n\n/**\n * @param {String} template\n * @returns {{ variable: string; pluralKey: string; countVariable: string }[]}\n */\nexport function getPluralObjects(template) {\n  const pluralObjects = [];\n  let open = template.indexOf(OPEN_TOKEN);\n  while (open !== -1) {\n    const close = template.indexOf(CLOSE_TOKEN, open);\n    const variable = template.substring(open + 2, close);\n    if (variable.startsWith(PLURAL_PREFIX)) {\n      const keyValue = template.substring(open + 2, close).replace(PLURAL_PREFIX, '');\n      const key = keyValue.substring(0, keyValue.indexOf('('));\n      const count = keyValue.substring(keyValue.indexOf('(') + 1, keyValue.indexOf(')'));\n      pluralObjects.push({ variable, pluralKey: key, countVariable: count });\n    }\n    open = template.indexOf(OPEN_TOKEN, close);\n  }\n  return pluralObjects;\n}\n"],"mappings":"AAAA;;AAEA,MAAMA,mBAAmB,GAAIC,KAAK,IAAKA,KAAK;AAC5C,MAAMC,UAAU,GAAG,IAAI;AACvB,MAAMC,WAAW,GAAG,IAAI;AACxB,MAAMC,aAAa,GAAG,SAAS;;AAE/B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiBA,CAACC,QAAQ,EAAEC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC9D,IAAI;IAAEC,SAAS,GAAGP,UAAU;IAAEQ,UAAU,GAAGP,WAAW;IAAEQ,SAAS,GAAGX;EAAoB,CAAC,GAAGQ,OAAO;EAEnG,KAAK,IAAII,GAAG,IAAIL,IAAI,EAAE;IACpB,IAAIN,KAAK,GAAGM,IAAI,CAACK,GAAG,CAAC,EAAEC,QAAQ,CAAC,CAAC;IACjCP,QAAQ,GAAGA,QAAQ,CAACQ,UAAU,CAACL,SAAS,GAAGG,GAAG,GAAGF,UAAU,EAAE,OAAOT,KAAK,KAAK,QAAQ,GAAGU,SAAS,CAACV,KAAK,CAAC,GAAGA,KAAK,CAAC;EACpH;EACA,OAAOK,QAAQ;AACjB;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASS,gBAAgBA,CAACT,QAAQ,EAAE;EACzC,MAAMU,aAAa,GAAG,EAAE;EACxB,IAAIC,IAAI,GAAGX,QAAQ,CAACY,OAAO,CAAChB,UAAU,CAAC;EACvC,OAAOe,IAAI,KAAK,CAAC,CAAC,EAAE;IAClB,MAAME,KAAK,GAAGb,QAAQ,CAACY,OAAO,CAACf,WAAW,EAAEc,IAAI,CAAC;IACjD,MAAMG,QAAQ,GAAGd,QAAQ,CAACe,SAAS,CAACJ,IAAI,GAAG,CAAC,EAAEE,KAAK,CAAC;IACpD,IAAIC,QAAQ,CAACE,UAAU,CAAClB,aAAa,CAAC,EAAE;MACtC,MAAMmB,QAAQ,GAAGjB,QAAQ,CAACe,SAAS,CAACJ,IAAI,GAAG,CAAC,EAAEE,KAAK,CAAC,CAACK,OAAO,CAACpB,aAAa,EAAE,EAAE,CAAC;MAC/E,MAAMQ,GAAG,GAAGW,QAAQ,CAACF,SAAS,CAAC,CAAC,EAAEE,QAAQ,CAACL,OAAO,CAAC,GAAG,CAAC,CAAC;MACxD,MAAMO,KAAK,GAAGF,QAAQ,CAACF,SAAS,CAACE,QAAQ,CAACL,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAEK,QAAQ,CAACL,OAAO,CAAC,GAAG,CAAC,CAAC;MAClFF,aAAa,CAACU,IAAI,CAAC;QAAEN,QAAQ;QAAEO,SAAS,EAAEf,GAAG;QAAEgB,aAAa,EAAEH;MAAM,CAAC,CAAC;IACxE;IACAR,IAAI,GAAGX,QAAQ,CAACY,OAAO,CAAChB,UAAU,EAAEiB,KAAK,CAAC;EAC5C;EACA,OAAOH,aAAa;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
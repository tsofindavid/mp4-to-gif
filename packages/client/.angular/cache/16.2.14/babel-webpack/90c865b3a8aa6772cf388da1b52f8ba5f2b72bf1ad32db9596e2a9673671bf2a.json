{"ast":null,"code":"/**\n * @param {File} imgFile\n * @param {Number} [size]\n */\nexport function generateThumb(imgFile, size = 40) {\n  if (imgFile.type === 'image/svg+xml') {\n    return URL.createObjectURL(imgFile);\n  }\n  let canvas = document.createElement('canvas');\n  let ctx = canvas.getContext('2d');\n  let img = new Image();\n  let promise = new Promise((resolve, reject) => {\n    img.onload = () => {\n      let ratio = img.height / img.width;\n      if (ratio > 1) {\n        canvas.width = size;\n        canvas.height = size * ratio;\n      } else {\n        canvas.height = size;\n        canvas.width = size / ratio;\n      }\n      ctx.fillStyle = 'rgb(240, 240, 240)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        if (!blob) {\n          reject();\n          return;\n        }\n        let url = URL.createObjectURL(blob);\n        resolve(url);\n      });\n    };\n    img.onerror = err => {\n      reject(err);\n    };\n  });\n  img.src = URL.createObjectURL(imgFile);\n  return promise;\n}","map":{"version":3,"names":["generateThumb","imgFile","size","type","URL","createObjectURL","canvas","document","createElement","ctx","getContext","img","Image","promise","Promise","resolve","reject","onload","ratio","height","width","fillStyle","fillRect","drawImage","toBlob","blob","url","onerror","err","src"],"sources":["/Users/David/Documents/own_projects/mp4-to-gif/node_modules/@uploadcare/blocks/blocks/utils/resizeImage.js"],"sourcesContent":["/**\n * @param {File} imgFile\n * @param {Number} [size]\n */\nexport function generateThumb(imgFile, size = 40) {\n  if (imgFile.type === 'image/svg+xml') {\n    return URL.createObjectURL(imgFile);\n  }\n  let canvas = document.createElement('canvas');\n  let ctx = canvas.getContext('2d');\n  let img = new Image();\n  let promise = new Promise((resolve, reject) => {\n    img.onload = () => {\n      let ratio = img.height / img.width;\n      if (ratio > 1) {\n        canvas.width = size;\n        canvas.height = size * ratio;\n      } else {\n        canvas.height = size;\n        canvas.width = size / ratio;\n      }\n      ctx.fillStyle = 'rgb(240, 240, 240)';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob((blob) => {\n        if (!blob) {\n          reject();\n          return;\n        }\n        let url = URL.createObjectURL(blob);\n        resolve(url);\n      });\n    };\n    img.onerror = (err) => {\n      reject(err);\n    };\n  });\n  img.src = URL.createObjectURL(imgFile);\n  return promise;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAaA,CAACC,OAAO,EAAEC,IAAI,GAAG,EAAE,EAAE;EAChD,IAAID,OAAO,CAACE,IAAI,KAAK,eAAe,EAAE;IACpC,OAAOC,GAAG,CAACC,eAAe,CAACJ,OAAO,CAAC;EACrC;EACA,IAAIK,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAC7C,IAAIC,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;EACjC,IAAIC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;EACrB,IAAIC,OAAO,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IAC7CL,GAAG,CAACM,MAAM,GAAG,MAAM;MACjB,IAAIC,KAAK,GAAGP,GAAG,CAACQ,MAAM,GAAGR,GAAG,CAACS,KAAK;MAClC,IAAIF,KAAK,GAAG,CAAC,EAAE;QACbZ,MAAM,CAACc,KAAK,GAAGlB,IAAI;QACnBI,MAAM,CAACa,MAAM,GAAGjB,IAAI,GAAGgB,KAAK;MAC9B,CAAC,MAAM;QACLZ,MAAM,CAACa,MAAM,GAAGjB,IAAI;QACpBI,MAAM,CAACc,KAAK,GAAGlB,IAAI,GAAGgB,KAAK;MAC7B;MACAT,GAAG,CAACY,SAAS,GAAG,oBAAoB;MACpCZ,GAAG,CAACa,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEhB,MAAM,CAACc,KAAK,EAAEd,MAAM,CAACa,MAAM,CAAC;MAC/CV,GAAG,CAACc,SAAS,CAACZ,GAAG,EAAE,CAAC,EAAE,CAAC,EAAEL,MAAM,CAACc,KAAK,EAAEd,MAAM,CAACa,MAAM,CAAC;MACrDb,MAAM,CAACkB,MAAM,CAAEC,IAAI,IAAK;QACtB,IAAI,CAACA,IAAI,EAAE;UACTT,MAAM,CAAC,CAAC;UACR;QACF;QACA,IAAIU,GAAG,GAAGtB,GAAG,CAACC,eAAe,CAACoB,IAAI,CAAC;QACnCV,OAAO,CAACW,GAAG,CAAC;MACd,CAAC,CAAC;IACJ,CAAC;IACDf,GAAG,CAACgB,OAAO,GAAIC,GAAG,IAAK;MACrBZ,MAAM,CAACY,GAAG,CAAC;IACb,CAAC;EACH,CAAC,CAAC;EACFjB,GAAG,CAACkB,GAAG,GAAGzB,GAAG,CAACC,eAAe,CAACJ,OAAO,CAAC;EACtC,OAAOY,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
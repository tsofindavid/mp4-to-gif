{"ast":null,"code":"// @ts-check\nimport { stringToArray } from './stringToArray.js';\nexport const IMAGE_ACCEPT_LIST = ['image/*', 'image/heif', 'image/heif-sequence', 'image/heic', 'image/heic-sequence', 'image/avif', 'image/avif-sequence', '.heif', '.heifs', '.heic', '.heics', '.avif', '.avifs'];\n\n/**\n * @param {string[]} [fileTypes]\n * @returns {string[]}\n */\nexport const mergeFileTypes = fileTypes => {\n  if (!fileTypes) {\n    return [];\n  }\n  return fileTypes.filter(item => typeof item === 'string').map(str => stringToArray(str)).flat();\n};\n\n/**\n * @param {String} mimeType\n * @param {String[]} allowedFileTypes\n * @returns {Boolean}\n */\nexport const matchMimeType = (mimeType, allowedFileTypes) => {\n  return allowedFileTypes.some(type => {\n    if (type.endsWith('*')) {\n      type = type.replace('*', '');\n      return mimeType.startsWith(type);\n    }\n    return mimeType === type;\n  });\n};\n\n/**\n * @param {String} fileName\n * @param {String[]} allowedFileTypes\n * @returns {Boolean}\n */\nexport const matchExtension = (fileName, allowedFileTypes) => {\n  return allowedFileTypes.some(type => {\n    if (!type.startsWith('.')) {\n      return false;\n    }\n    return fileName.toLowerCase().endsWith(type.toLowerCase());\n  });\n};\n\n/**\n * @param {File | Blob} file\n * @returns {Boolean}\n */\nexport const fileIsImage = file => {\n  let type = file?.type;\n  if (!type) {\n    return false;\n  }\n  return matchMimeType(type, IMAGE_ACCEPT_LIST);\n};\n\n/**\n * Checks if the given data is a Blob.\n *\n * @param {unknown} data - The data to check.\n * @returns {boolean} - True if the data is a Blob, false otherwise.\n */\nexport const isBlob = data => {\n  return typeof Blob !== 'undefined' && data instanceof Blob;\n};\n\n/**\n * Checks if the given data is a File.\n *\n * @param {unknown} data - The data to check.\n * @returns {boolean} - True if the data is a File, false otherwise.\n */\nexport const isFile = data => {\n  return typeof File !== 'undefined' && data instanceof File;\n};","map":{"version":3,"names":["stringToArray","IMAGE_ACCEPT_LIST","mergeFileTypes","fileTypes","filter","item","map","str","flat","matchMimeType","mimeType","allowedFileTypes","some","type","endsWith","replace","startsWith","matchExtension","fileName","toLowerCase","fileIsImage","file","isBlob","data","Blob","isFile","File"],"sources":["/Users/David/Documents/own_projects/mp4-to-gif/node_modules/@uploadcare/blocks/utils/fileTypes.js"],"sourcesContent":["// @ts-check\nimport { stringToArray } from './stringToArray.js';\n\nexport const IMAGE_ACCEPT_LIST = [\n  'image/*',\n  'image/heif',\n  'image/heif-sequence',\n  'image/heic',\n  'image/heic-sequence',\n  'image/avif',\n  'image/avif-sequence',\n  '.heif',\n  '.heifs',\n  '.heic',\n  '.heics',\n  '.avif',\n  '.avifs',\n];\n\n/**\n * @param {string[]} [fileTypes]\n * @returns {string[]}\n */\nexport const mergeFileTypes = (fileTypes) => {\n  if (!fileTypes) {\n    return [];\n  }\n  return fileTypes\n    .filter((item) => typeof item === 'string')\n    .map((str) => stringToArray(str))\n    .flat();\n};\n\n/**\n * @param {String} mimeType\n * @param {String[]} allowedFileTypes\n * @returns {Boolean}\n */\nexport const matchMimeType = (mimeType, allowedFileTypes) => {\n  return allowedFileTypes.some((type) => {\n    if (type.endsWith('*')) {\n      type = type.replace('*', '');\n      return mimeType.startsWith(type);\n    }\n\n    return mimeType === type;\n  });\n};\n\n/**\n * @param {String} fileName\n * @param {String[]} allowedFileTypes\n * @returns {Boolean}\n */\nexport const matchExtension = (fileName, allowedFileTypes) => {\n  return allowedFileTypes.some((type) => {\n    if (!type.startsWith('.')) {\n      return false;\n    }\n\n    return fileName.toLowerCase().endsWith(type.toLowerCase());\n  });\n};\n\n/**\n * @param {File | Blob} file\n * @returns {Boolean}\n */\nexport const fileIsImage = (file) => {\n  let type = file?.type;\n  if (!type) {\n    return false;\n  }\n  return matchMimeType(type, IMAGE_ACCEPT_LIST);\n};\n\n/**\n * Checks if the given data is a Blob.\n *\n * @param {unknown} data - The data to check.\n * @returns {boolean} - True if the data is a Blob, false otherwise.\n */\nexport const isBlob = (data) => {\n  return typeof Blob !== 'undefined' && data instanceof Blob;\n};\n\n/**\n * Checks if the given data is a File.\n *\n * @param {unknown} data - The data to check.\n * @returns {boolean} - True if the data is a File, false otherwise.\n */\nexport const isFile = (data) => {\n  return typeof File !== 'undefined' && data instanceof File;\n};\n"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,oBAAoB;AAElD,OAAO,MAAMC,iBAAiB,GAAG,CAC/B,SAAS,EACT,YAAY,EACZ,qBAAqB,EACrB,YAAY,EACZ,qBAAqB,EACrB,YAAY,EACZ,qBAAqB,EACrB,OAAO,EACP,QAAQ,EACR,OAAO,EACP,QAAQ,EACR,OAAO,EACP,QAAQ,CACT;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAIC,SAAS,IAAK;EAC3C,IAAI,CAACA,SAAS,EAAE;IACd,OAAO,EAAE;EACX;EACA,OAAOA,SAAS,CACbC,MAAM,CAAEC,IAAI,IAAK,OAAOA,IAAI,KAAK,QAAQ,CAAC,CAC1CC,GAAG,CAAEC,GAAG,IAAKP,aAAa,CAACO,GAAG,CAAC,CAAC,CAChCC,IAAI,CAAC,CAAC;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACC,QAAQ,EAAEC,gBAAgB,KAAK;EAC3D,OAAOA,gBAAgB,CAACC,IAAI,CAAEC,IAAI,IAAK;IACrC,IAAIA,IAAI,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;MACtBD,IAAI,GAAGA,IAAI,CAACE,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;MAC5B,OAAOL,QAAQ,CAACM,UAAU,CAACH,IAAI,CAAC;IAClC;IAEA,OAAOH,QAAQ,KAAKG,IAAI;EAC1B,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,cAAc,GAAGA,CAACC,QAAQ,EAAEP,gBAAgB,KAAK;EAC5D,OAAOA,gBAAgB,CAACC,IAAI,CAAEC,IAAI,IAAK;IACrC,IAAI,CAACA,IAAI,CAACG,UAAU,CAAC,GAAG,CAAC,EAAE;MACzB,OAAO,KAAK;IACd;IAEA,OAAOE,QAAQ,CAACC,WAAW,CAAC,CAAC,CAACL,QAAQ,CAACD,IAAI,CAACM,WAAW,CAAC,CAAC,CAAC;EAC5D,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIC,IAAI,IAAK;EACnC,IAAIR,IAAI,GAAGQ,IAAI,EAAER,IAAI;EACrB,IAAI,CAACA,IAAI,EAAE;IACT,OAAO,KAAK;EACd;EACA,OAAOJ,aAAa,CAACI,IAAI,EAAEZ,iBAAiB,CAAC;AAC/C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMqB,MAAM,GAAIC,IAAI,IAAK;EAC9B,OAAO,OAAOC,IAAI,KAAK,WAAW,IAAID,IAAI,YAAYC,IAAI;AAC5D,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,GAAIF,IAAI,IAAK;EAC9B,OAAO,OAAOG,IAAI,KAAK,WAAW,IAAIH,IAAI,YAAYG,IAAI;AAC5D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
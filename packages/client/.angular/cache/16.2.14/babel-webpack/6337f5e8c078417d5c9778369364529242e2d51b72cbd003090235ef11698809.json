{"ast":null,"code":"// @ts-check\nimport { ActivityBlock } from './ActivityBlock.js';\nimport { Data } from '@symbiotejs/symbiote';\nimport { IMAGE_ACCEPT_LIST, mergeFileTypes, fileIsImage } from '../utils/fileTypes.js';\nimport { uploadEntrySchema } from './uploadEntrySchema.js';\nimport { customUserAgent } from '../blocks/utils/userAgent.js';\nimport { TypedCollection } from './TypedCollection.js';\nimport { uploaderBlockCtx } from './CTX.js';\nimport { EVENT_TYPES, EventData, EventManager } from './EventManager.js';\nimport { Modal } from '../blocks/Modal/Modal.js';\nimport { stringToArray } from '../utils/stringToArray.js';\nimport { UploadSource } from '../blocks/utils/UploadSource.js';\nexport class UploaderBlock extends ActivityBlock {\n  init$ = uploaderBlockCtx(this);\n  // @ts-ignore TODO: fix this\n  cssInit$ = {\n    ...this.cssInit$,\n    '--cfg-max-concurrent-requests': 1\n  };\n\n  /** @private */\n  __initialUploadMetadata = null;\n\n  /**\n   * This is Public JS API method. Could be called before block initialization, so we need to delay state interactions\n   * until block init.\n   *\n   * TODO: If we add more public methods, it is better to use the single queue instead of tons of private fields per\n   * each method. See https://github.com/uploadcare/blocks/pull/162/\n   *\n   * @param {import('@uploadcare/upload-client').Metadata} metadata\n   * @public\n   */\n  setUploadMetadata(metadata) {\n    if (!this.connectedOnce) {\n      // TODO: move to config block\n      // @ts-ignore TODO: fix this\n      this.__initialUploadMetadata = metadata;\n    } else {\n      this.$['*uploadMetadata'] = metadata;\n    }\n  }\n  initCallback() {\n    super.initCallback();\n    if (this.__initialUploadMetadata) {\n      this.$['*uploadMetadata'] = this.__initialUploadMetadata;\n    }\n    this.sub('--cfg-max-concurrent-requests', value => {\n      this.$['*uploadQueue'].concurrency = Number(value) || 1;\n    });\n  }\n  destroyCallback() {\n    super.destroyCallback();\n    let blocksRegistry = this.$['*blocksRegistry'];\n    if (blocksRegistry.has(this)) {\n      this.uploadCollection.unobserve(this._handleCollectionUpdate);\n      blocksRegistry.delete(this);\n    }\n  }\n\n  // TODO: Probably we should not allow user to override `source` property\n\n  /**\n   * @param {string} url\n   * @param {{ silent?: boolean; fileName?: string; source?: string }} [options]\n   */\n  addFileFromUrl(url, {\n    silent,\n    fileName,\n    source\n  } = {}) {\n    this.uploadCollection.add({\n      externalUrl: url,\n      fileName: fileName ?? null,\n      silentUpload: silent ?? false,\n      source: source ?? UploadSource.API\n    });\n  }\n\n  /**\n   * @param {string} uuid\n   * @param {{ silent?: boolean; fileName?: string; source?: string }} [options]\n   */\n  addFileFromUuid(uuid, {\n    silent,\n    fileName,\n    source\n  } = {}) {\n    this.uploadCollection.add({\n      uuid,\n      fileName: fileName ?? null,\n      silentUpload: silent ?? false,\n      source: source ?? UploadSource.API\n    });\n  }\n\n  /**\n   * @param {File} file\n   * @param {{ silent?: boolean; fileName?: string; source?: string }} [options]\n   */\n  addFileFromObject(file, {\n    silent,\n    fileName,\n    source\n  } = {}) {\n    this.uploadCollection.add({\n      file,\n      isImage: fileIsImage(file),\n      mimeType: file.type,\n      fileName: fileName ?? file.name,\n      fileSize: file.size,\n      silentUpload: silent ?? false,\n      source: source ?? UploadSource.API\n    });\n  }\n\n  /**\n   * @deprecated Will be removed in the near future. Please use `addFileFromObject`, `addFileFromUrl` or\n   *   `addFileFromUuid` instead.\n   * @param {File[]} files\n   */\n  addFiles(files) {\n    console.warn('`addFiles` method is deprecated. Please use `addFileFromObject`, `addFileFromUrl` or `addFileFromUuid` instead.');\n    files.forEach(( /** @type {File} */file) => {\n      this.uploadCollection.add({\n        file,\n        isImage: fileIsImage(file),\n        mimeType: file.type,\n        fileName: file.name,\n        fileSize: file.size\n      });\n    });\n  }\n  uploadAll() {\n    this.$['*uploadTrigger'] = {};\n  }\n\n  /** @param {{ captureCamera?: boolean }} options */\n  openSystemDialog(options = {}) {\n    let accept = mergeFileTypes([this.getCssData('--cfg-accept'), ...(this.getCssData('--cfg-img-only') ? IMAGE_ACCEPT_LIST : [])]).join(',');\n    if (this.getCssData('--cfg-accept') && !!this.getCssData('--cfg-img-only')) {\n      console.warn('There could be a mistake.\\n' + 'Both `--cfg-accept` and `--cfg-img-only` parameters are set.\\n' + 'The value of `--cfg-accept` will be concatenated with the internal image mime types list.');\n    }\n    this.fileInput = document.createElement('input');\n    this.fileInput.type = 'file';\n    this.fileInput.multiple = !!this.getCssData('--cfg-multiple');\n    if (options.captureCamera) {\n      this.fileInput.capture = '';\n      this.fileInput.accept = IMAGE_ACCEPT_LIST.join(',');\n    } else {\n      this.fileInput.accept = accept;\n    }\n    this.fileInput.dispatchEvent(new MouseEvent('click'));\n    this.fileInput.onchange = () => {\n      // @ts-ignore TODO: fix this\n      [...this.fileInput['files']].forEach(file => this.addFileFromObject(file, {\n        source: UploadSource.LOCAL\n      }));\n      // To call uploadTrigger UploadList should draw file items first:\n      this.$['*currentActivity'] = ActivityBlock.activities.UPLOAD_LIST;\n      this.setForCtxTarget(Modal.StateConsumerScope, '*modalActive', true);\n      // @ts-ignore TODO: fix this\n      this.fileInput['value'] = '';\n      this.fileInput = null;\n    };\n  }\n\n  /** @type {string[]} */\n  get sourceList() {\n    /** @type {string[]} */\n    let list = [];\n    if (this.getCssData('--cfg-source-list')) {\n      list = stringToArray(this.getCssData('--cfg-source-list'));\n    }\n    return list;\n  }\n\n  /** @param {Boolean} [force] */\n  initFlow(force = false) {\n    if (this.$['*uploadList']?.length && !force) {\n      this.set$({\n        '*currentActivity': ActivityBlock.activities.UPLOAD_LIST\n      });\n      this.setForCtxTarget(Modal.StateConsumerScope, '*modalActive', true);\n    } else {\n      if (this.sourceList?.length === 1) {\n        let srcKey = this.sourceList[0];\n        // Single source case:\n        if (srcKey === 'local') {\n          this.$['*currentActivity'] = ActivityBlock.activities.UPLOAD_LIST;\n          this?.['openSystemDialog']();\n        } else {\n          if (Object.values(UploaderBlock.extSrcList).includes( /** @type {any} */srcKey)) {\n            this.set$({\n              '*currentActivityParams': {\n                externalSourceType: srcKey\n              },\n              '*currentActivity': ActivityBlock.activities.EXTERNAL\n            });\n          } else {\n            this.$['*currentActivity'] = srcKey;\n          }\n          this.setForCtxTarget(Modal.StateConsumerScope, '*modalActive', true);\n        }\n      } else {\n        // Multiple sources case:\n        this.set$({\n          '*currentActivity': ActivityBlock.activities.START_FROM\n        });\n        this.setForCtxTarget(Modal.StateConsumerScope, '*modalActive', true);\n      }\n    }\n    EventManager.emit(new EventData({\n      type: EVENT_TYPES.INIT_FLOW,\n      ctx: this.ctxName\n    }), undefined, false);\n  }\n  doneFlow() {\n    this.set$({\n      '*currentActivity': this.doneActivity,\n      '*history': this.doneActivity ? [this.doneActivity] : []\n    });\n    if (!this.$['*currentActivity']) {\n      this.setForCtxTarget(Modal.StateConsumerScope, '*modalActive', false);\n    }\n    EventManager.emit(new EventData({\n      type: EVENT_TYPES.DONE_FLOW,\n      ctx: this.ctxName\n    }), undefined, false);\n  }\n\n  /** @returns {TypedCollection} */\n  get uploadCollection() {\n    if (!this.has('*uploadCollection')) {\n      let uploadCollection = new TypedCollection({\n        typedSchema: uploadEntrySchema,\n        watchList: ['uploadProgress', 'fileInfo', 'uploadError', 'validationErrorMsg', 'cdnUrlModifiers'],\n        handler: (entries, added, removed) => {\n          for (let entry of removed) {\n            entry?.getValue('abortController')?.abort();\n            entry?.setValue('abortController', null);\n            URL.revokeObjectURL(entry?.getValue('thumbUrl'));\n          }\n          this.$['*uploadList'] = entries.map(uid => {\n            return {\n              uid\n            };\n          });\n        }\n      });\n      uploadCollection.observe(this._handleCollectionUpdate);\n      this.add('*uploadCollection', uploadCollection);\n    }\n    return this.$['*uploadCollection'];\n  }\n\n  /** @private */\n  // @ts-ignore TODO: fix this\n  _handleCollectionUpdate = changeMap => {\n    let uploadCollection = this.uploadCollection;\n    if (changeMap.uploadProgress) {\n      let commonProgress = 0;\n      /** @type {String[]} */\n      let items = uploadCollection.findItems(entry => {\n        return !entry.getValue('uploadError');\n      });\n      items.forEach(id => {\n        commonProgress += uploadCollection.readProp(id, 'uploadProgress');\n      });\n      let progress = Math.round(commonProgress / items.length);\n      this.$['*commonProgress'] = progress;\n      EventManager.emit(new EventData({\n        type: EVENT_TYPES.UPLOAD_PROGRESS,\n        ctx: this.ctxName,\n        data: progress\n      }), undefined, progress === 100);\n    }\n    if (changeMap.fileInfo) {\n      let loadedItems = uploadCollection.findItems(entry => {\n        return !!entry.getValue('fileInfo');\n      });\n      let errorItems = uploadCollection.findItems(entry => {\n        return !!entry.getValue('uploadError') || !!entry.getValue('validationErrorMsg');\n      });\n      if (uploadCollection.size - errorItems.length === loadedItems.length) {\n        let data = this.getOutputData(dataItem => {\n          return !!dataItem.getValue('fileInfo') && !dataItem.getValue('silentUpload');\n        });\n        data.length > 0 && EventManager.emit(new EventData({\n          type: EVENT_TYPES.UPLOAD_FINISH,\n          ctx: this.ctxName,\n          data\n        }));\n      }\n    }\n    if (changeMap.uploadError) {\n      let items = uploadCollection.findItems(entry => {\n        return !!entry.getValue('uploadError');\n      });\n      items.forEach(id => {\n        EventManager.emit(new EventData({\n          type: EVENT_TYPES.UPLOAD_ERROR,\n          ctx: this.ctxName,\n          data: uploadCollection.readProp(id, 'uploadError')\n        }), undefined, false);\n      });\n    }\n    if (changeMap.validationErrorMsg) {\n      let items = uploadCollection.findItems(entry => {\n        return !!entry.getValue('validationErrorMsg');\n      });\n      items.forEach(id => {\n        EventManager.emit(new EventData({\n          type: EVENT_TYPES.VALIDATION_ERROR,\n          ctx: this.ctxName,\n          data: uploadCollection.readProp(id, 'validationErrorMsg')\n        }), undefined, false);\n      });\n    }\n    if (changeMap.cdnUrlModifiers) {\n      let items = uploadCollection.findItems(entry => {\n        return !!entry.getValue('cdnUrlModifiers');\n      });\n      items.forEach(id => {\n        EventManager.emit(new EventData({\n          type: EVENT_TYPES.CDN_MODIFICATION,\n          ctx: this.ctxName,\n          data: Data.getCtx(id).store\n        }), undefined, false);\n      });\n    }\n  };\n\n  /** @returns {import('@uploadcare/upload-client').FileFromOptions} */\n  getUploadClientOptions() {\n    let store = this.getCssData('--cfg-store', true);\n    let options = {\n      // undefined 'store' means 'auto'\n      store: store === null ? undefined : !!store,\n      publicKey: this.getCssData('--cfg-pubkey'),\n      baseCDN: this.getCssData('--cfg-cdn-cname'),\n      baseURL: this.getCssData('--cfg-base-url'),\n      userAgent: customUserAgent,\n      integration: this.getCssData('--cfg-user-agent-integration'),\n      secureSignature: this.getCssData('--cfg-secure-signature'),\n      secureExpire: this.getCssData('--cfg-secure-expire'),\n      retryThrottledRequestMaxTimes: this.getCssData('--cfg-retry-throttled-request-max-times'),\n      multipartMinFileSize: this.getCssData('--cfg-multipart-min-file-size'),\n      multipartChunkSize: this.getCssData('--cfg-multipart-chunk-size'),\n      maxConcurrentRequests: this.getCssData('--cfg-multipart-max-concurrent-requests'),\n      multipartMaxAttempts: this.getCssData('--cfg-multipart-max-attempts'),\n      checkForUrlDuplicates: !!this.getCssData('--cfg-check-for-url-duplicates'),\n      saveUrlForRecurrentUploads: !!this.getCssData('--cfg-save-url-for-recurrent-uploads'),\n      metadata: this.$['*uploadMetadata']\n    };\n    console.log('Upload client options:', options);\n    return options;\n  }\n\n  /** @param {(item: import('./TypedData.js').TypedData) => Boolean} checkFn */\n  getOutputData(checkFn) {\n    // @ts-ignore TODO: fix this\n    let data = [];\n    let items = this.uploadCollection.findItems(checkFn);\n    items.forEach(itemId => {\n      let uploadEntryData = Data.getCtx(itemId).store;\n      /** @type {import('@uploadcare/upload-client').UploadcareFile} */\n      let fileInfo = uploadEntryData.fileInfo || {\n        name: uploadEntryData.fileName,\n        fileSize: uploadEntryData.fileSize,\n        isImage: uploadEntryData.isImage,\n        mimeType: uploadEntryData.mimeType\n      };\n      let outputItem = {\n        ...fileInfo,\n        cdnUrlModifiers: uploadEntryData.cdnUrlModifiers,\n        cdnUrl: uploadEntryData.cdnUrl || fileInfo.cdnUrl\n      };\n      data.push(outputItem);\n    });\n    // @ts-ignore TODO: fix this\n    return data;\n  }\n}\n\n/** @enum {String} */\nUploaderBlock.extSrcList = Object.freeze({\n  FACEBOOK: 'facebook',\n  DROPBOX: 'dropbox',\n  GDRIVE: 'gdrive',\n  GPHOTOS: 'gphotos',\n  INSTAGRAM: 'instagram',\n  FLICKR: 'flickr',\n  VK: 'vk',\n  EVERNOTE: 'evernote',\n  BOX: 'box',\n  ONEDRIVE: 'onedrive',\n  HUDDLE: 'huddle'\n});\n\n/** @enum {String} */\nUploaderBlock.sourceTypes = Object.freeze({\n  LOCAL: 'local',\n  URL: 'url',\n  CAMERA: 'camera',\n  DRAW: 'draw',\n  ...UploaderBlock.extSrcList\n});\nObject.values(EVENT_TYPES).forEach(eType => {\n  let eName = EventManager.eName(eType);\n  window.addEventListener(eName, e => {\n    let outputTypes = [EVENT_TYPES.UPLOAD_FINISH, EVENT_TYPES.REMOVE, EVENT_TYPES.CDN_MODIFICATION];\n    // @ts-ignore TODO: fix this\n    if (outputTypes.includes(e.detail.type)) {\n      // @ts-ignore TODO: fix this\n      let dataCtx = Data.getCtx(e.detail.ctx);\n      /** @type {TypedCollection} */\n      let uploadCollection = dataCtx.read('uploadCollection');\n      // @ts-ignore TODO: fix this\n      let data = [];\n      uploadCollection.items().forEach(id => {\n        let uploadEntryData = Data.getCtx(id).store;\n        /** @type {import('@uploadcare/upload-client').UploadcareFile} */\n        let fileInfo = uploadEntryData.fileInfo;\n        if (fileInfo) {\n          let outputItem = {\n            ...fileInfo,\n            cdnUrlModifiers: uploadEntryData.cdnUrlModifiers,\n            cdnUrl: uploadEntryData.cdnUrl || fileInfo.cdnUrl\n          };\n          data.push(outputItem);\n        }\n      });\n      EventManager.emit(new EventData({\n        type: EVENT_TYPES.DATA_OUTPUT,\n        // @ts-ignore TODO: fix this\n        ctx: e.detail.ctx,\n        // @ts-ignore TODO: fix this\n        data\n      }));\n      // @ts-ignore TODO: fix this\n      dataCtx.pub('outputData', data);\n    }\n  });\n});","map":{"version":3,"names":["ActivityBlock","Data","IMAGE_ACCEPT_LIST","mergeFileTypes","fileIsImage","uploadEntrySchema","customUserAgent","TypedCollection","uploaderBlockCtx","EVENT_TYPES","EventData","EventManager","Modal","stringToArray","UploadSource","UploaderBlock","init$","cssInit$","__initialUploadMetadata","setUploadMetadata","metadata","connectedOnce","$","initCallback","sub","value","concurrency","Number","destroyCallback","blocksRegistry","has","uploadCollection","unobserve","_handleCollectionUpdate","delete","addFileFromUrl","url","silent","fileName","source","add","externalUrl","silentUpload","API","addFileFromUuid","uuid","addFileFromObject","file","isImage","mimeType","type","name","fileSize","size","addFiles","files","console","warn","forEach","uploadAll","openSystemDialog","options","accept","getCssData","join","fileInput","document","createElement","multiple","captureCamera","capture","dispatchEvent","MouseEvent","onchange","LOCAL","activities","UPLOAD_LIST","setForCtxTarget","StateConsumerScope","sourceList","list","initFlow","force","length","set$","srcKey","Object","values","extSrcList","includes","externalSourceType","EXTERNAL","START_FROM","emit","INIT_FLOW","ctx","ctxName","undefined","doneFlow","doneActivity","DONE_FLOW","typedSchema","watchList","handler","entries","added","removed","entry","getValue","abort","setValue","URL","revokeObjectURL","map","uid","observe","changeMap","uploadProgress","commonProgress","items","findItems","id","readProp","progress","Math","round","UPLOAD_PROGRESS","data","fileInfo","loadedItems","errorItems","getOutputData","dataItem","UPLOAD_FINISH","uploadError","UPLOAD_ERROR","validationErrorMsg","VALIDATION_ERROR","cdnUrlModifiers","CDN_MODIFICATION","getCtx","store","getUploadClientOptions","publicKey","baseCDN","baseURL","userAgent","integration","secureSignature","secureExpire","retryThrottledRequestMaxTimes","multipartMinFileSize","multipartChunkSize","maxConcurrentRequests","multipartMaxAttempts","checkForUrlDuplicates","saveUrlForRecurrentUploads","log","checkFn","itemId","uploadEntryData","outputItem","cdnUrl","push","freeze","FACEBOOK","DROPBOX","GDRIVE","GPHOTOS","INSTAGRAM","FLICKR","VK","EVERNOTE","BOX","ONEDRIVE","HUDDLE","sourceTypes","CAMERA","DRAW","eType","eName","window","addEventListener","e","outputTypes","REMOVE","detail","dataCtx","read","DATA_OUTPUT","pub"],"sources":["/Users/David/Documents/own_projects/mp4-to-gif/node_modules/@uploadcare/blocks/abstract/UploaderBlock.js"],"sourcesContent":["// @ts-check\nimport { ActivityBlock } from './ActivityBlock.js';\n\nimport { Data } from '@symbiotejs/symbiote';\nimport { IMAGE_ACCEPT_LIST, mergeFileTypes, fileIsImage } from '../utils/fileTypes.js';\nimport { uploadEntrySchema } from './uploadEntrySchema.js';\nimport { customUserAgent } from '../blocks/utils/userAgent.js';\nimport { TypedCollection } from './TypedCollection.js';\nimport { uploaderBlockCtx } from './CTX.js';\nimport { EVENT_TYPES, EventData, EventManager } from './EventManager.js';\nimport { Modal } from '../blocks/Modal/Modal.js';\nimport { stringToArray } from '../utils/stringToArray.js';\nimport { UploadSource } from '../blocks/utils/UploadSource.js';\n\nexport class UploaderBlock extends ActivityBlock {\n  init$ = uploaderBlockCtx(this);\n  // @ts-ignore TODO: fix this\n  cssInit$ = {\n    ...this.cssInit$,\n    '--cfg-max-concurrent-requests': 1,\n  };\n\n  /** @private */\n  __initialUploadMetadata = null;\n\n  /**\n   * This is Public JS API method. Could be called before block initialization, so we need to delay state interactions\n   * until block init.\n   *\n   * TODO: If we add more public methods, it is better to use the single queue instead of tons of private fields per\n   * each method. See https://github.com/uploadcare/blocks/pull/162/\n   *\n   * @param {import('@uploadcare/upload-client').Metadata} metadata\n   * @public\n   */\n  setUploadMetadata(metadata) {\n    if (!this.connectedOnce) {\n      // TODO: move to config block\n      // @ts-ignore TODO: fix this\n      this.__initialUploadMetadata = metadata;\n    } else {\n      this.$['*uploadMetadata'] = metadata;\n    }\n  }\n\n  initCallback() {\n    super.initCallback();\n\n    if (this.__initialUploadMetadata) {\n      this.$['*uploadMetadata'] = this.__initialUploadMetadata;\n    }\n\n    this.sub('--cfg-max-concurrent-requests', (value) => {\n      this.$['*uploadQueue'].concurrency = Number(value) || 1;\n    });\n  }\n\n  destroyCallback() {\n    super.destroyCallback();\n\n    let blocksRegistry = this.$['*blocksRegistry'];\n    if (blocksRegistry.has(this)) {\n      this.uploadCollection.unobserve(this._handleCollectionUpdate);\n      blocksRegistry.delete(this);\n    }\n  }\n\n  // TODO: Probably we should not allow user to override `source` property\n\n  /**\n   * @param {string} url\n   * @param {{ silent?: boolean; fileName?: string; source?: string }} [options]\n   */\n  addFileFromUrl(url, { silent, fileName, source } = {}) {\n    this.uploadCollection.add({\n      externalUrl: url,\n      fileName: fileName ?? null,\n      silentUpload: silent ?? false,\n      source: source ?? UploadSource.API,\n    });\n  }\n\n  /**\n   * @param {string} uuid\n   * @param {{ silent?: boolean; fileName?: string; source?: string }} [options]\n   */\n  addFileFromUuid(uuid, { silent, fileName, source } = {}) {\n    this.uploadCollection.add({\n      uuid,\n      fileName: fileName ?? null,\n      silentUpload: silent ?? false,\n      source: source ?? UploadSource.API,\n    });\n  }\n\n  /**\n   * @param {File} file\n   * @param {{ silent?: boolean; fileName?: string; source?: string }} [options]\n   */\n  addFileFromObject(file, { silent, fileName, source } = {}) {\n    this.uploadCollection.add({\n      file,\n      isImage: fileIsImage(file),\n      mimeType: file.type,\n      fileName: fileName ?? file.name,\n      fileSize: file.size,\n      silentUpload: silent ?? false,\n      source: source ?? UploadSource.API,\n    });\n  }\n\n  /**\n   * @deprecated Will be removed in the near future. Please use `addFileFromObject`, `addFileFromUrl` or\n   *   `addFileFromUuid` instead.\n   * @param {File[]} files\n   */\n  addFiles(files) {\n    console.warn(\n      '`addFiles` method is deprecated. Please use `addFileFromObject`, `addFileFromUrl` or `addFileFromUuid` instead.'\n    );\n    files.forEach((/** @type {File} */ file) => {\n      this.uploadCollection.add({\n        file,\n        isImage: fileIsImage(file),\n        mimeType: file.type,\n        fileName: file.name,\n        fileSize: file.size,\n      });\n    });\n  }\n\n  uploadAll() {\n    this.$['*uploadTrigger'] = {};\n  }\n\n  /** @param {{ captureCamera?: boolean }} options */\n  openSystemDialog(options = {}) {\n    let accept = mergeFileTypes([\n      this.getCssData('--cfg-accept'),\n      ...(this.getCssData('--cfg-img-only') ? IMAGE_ACCEPT_LIST : []),\n    ]).join(',');\n\n    if (this.getCssData('--cfg-accept') && !!this.getCssData('--cfg-img-only')) {\n      console.warn(\n        'There could be a mistake.\\n' +\n          'Both `--cfg-accept` and `--cfg-img-only` parameters are set.\\n' +\n          'The value of `--cfg-accept` will be concatenated with the internal image mime types list.'\n      );\n    }\n    this.fileInput = document.createElement('input');\n    this.fileInput.type = 'file';\n    this.fileInput.multiple = !!this.getCssData('--cfg-multiple');\n    if (options.captureCamera) {\n      this.fileInput.capture = '';\n      this.fileInput.accept = IMAGE_ACCEPT_LIST.join(',');\n    } else {\n      this.fileInput.accept = accept;\n    }\n    this.fileInput.dispatchEvent(new MouseEvent('click'));\n    this.fileInput.onchange = () => {\n      // @ts-ignore TODO: fix this\n      [...this.fileInput['files']].forEach((file) => this.addFileFromObject(file, { source: UploadSource.LOCAL }));\n      // To call uploadTrigger UploadList should draw file items first:\n      this.$['*currentActivity'] = ActivityBlock.activities.UPLOAD_LIST;\n      this.setForCtxTarget(Modal.StateConsumerScope, '*modalActive', true);\n      // @ts-ignore TODO: fix this\n      this.fileInput['value'] = '';\n      this.fileInput = null;\n    };\n  }\n\n  /** @type {string[]} */\n  get sourceList() {\n    /** @type {string[]} */\n    let list = [];\n    if (this.getCssData('--cfg-source-list')) {\n      list = stringToArray(this.getCssData('--cfg-source-list'));\n    }\n    return list;\n  }\n\n  /** @param {Boolean} [force] */\n  initFlow(force = false) {\n    if (this.$['*uploadList']?.length && !force) {\n      this.set$({\n        '*currentActivity': ActivityBlock.activities.UPLOAD_LIST,\n      });\n      this.setForCtxTarget(Modal.StateConsumerScope, '*modalActive', true);\n    } else {\n      if (this.sourceList?.length === 1) {\n        let srcKey = this.sourceList[0];\n        // Single source case:\n        if (srcKey === 'local') {\n          this.$['*currentActivity'] = ActivityBlock.activities.UPLOAD_LIST;\n          this?.['openSystemDialog']();\n        } else {\n          if (Object.values(UploaderBlock.extSrcList).includes(/** @type {any} */ (srcKey))) {\n            this.set$({\n              '*currentActivityParams': {\n                externalSourceType: srcKey,\n              },\n              '*currentActivity': ActivityBlock.activities.EXTERNAL,\n            });\n          } else {\n            this.$['*currentActivity'] = srcKey;\n          }\n          this.setForCtxTarget(Modal.StateConsumerScope, '*modalActive', true);\n        }\n      } else {\n        // Multiple sources case:\n        this.set$({\n          '*currentActivity': ActivityBlock.activities.START_FROM,\n        });\n        this.setForCtxTarget(Modal.StateConsumerScope, '*modalActive', true);\n      }\n    }\n    EventManager.emit(\n      new EventData({\n        type: EVENT_TYPES.INIT_FLOW,\n        ctx: this.ctxName,\n      }),\n      undefined,\n      false\n    );\n  }\n\n  doneFlow() {\n    this.set$({\n      '*currentActivity': this.doneActivity,\n      '*history': this.doneActivity ? [this.doneActivity] : [],\n    });\n    if (!this.$['*currentActivity']) {\n      this.setForCtxTarget(Modal.StateConsumerScope, '*modalActive', false);\n    }\n    EventManager.emit(\n      new EventData({\n        type: EVENT_TYPES.DONE_FLOW,\n        ctx: this.ctxName,\n      }),\n      undefined,\n      false\n    );\n  }\n\n  /** @returns {TypedCollection} */\n  get uploadCollection() {\n    if (!this.has('*uploadCollection')) {\n      let uploadCollection = new TypedCollection({\n        typedSchema: uploadEntrySchema,\n        watchList: ['uploadProgress', 'fileInfo', 'uploadError', 'validationErrorMsg', 'cdnUrlModifiers'],\n        handler: (entries, added, removed) => {\n          for (let entry of removed) {\n            entry?.getValue('abortController')?.abort();\n            entry?.setValue('abortController', null);\n            URL.revokeObjectURL(entry?.getValue('thumbUrl'));\n          }\n          this.$['*uploadList'] = entries.map((uid) => {\n            return { uid };\n          });\n        },\n      });\n      uploadCollection.observe(this._handleCollectionUpdate);\n      this.add('*uploadCollection', uploadCollection);\n    }\n    return this.$['*uploadCollection'];\n  }\n\n  /** @private */\n  // @ts-ignore TODO: fix this\n  _handleCollectionUpdate = (changeMap) => {\n    let uploadCollection = this.uploadCollection;\n    if (changeMap.uploadProgress) {\n      let commonProgress = 0;\n      /** @type {String[]} */\n      let items = uploadCollection.findItems((entry) => {\n        return !entry.getValue('uploadError');\n      });\n      items.forEach((id) => {\n        commonProgress += uploadCollection.readProp(id, 'uploadProgress');\n      });\n      let progress = Math.round(commonProgress / items.length);\n      this.$['*commonProgress'] = progress;\n      EventManager.emit(\n        new EventData({\n          type: EVENT_TYPES.UPLOAD_PROGRESS,\n          ctx: this.ctxName,\n          data: progress,\n        }),\n        undefined,\n        progress === 100\n      );\n    }\n    if (changeMap.fileInfo) {\n      let loadedItems = uploadCollection.findItems((entry) => {\n        return !!entry.getValue('fileInfo');\n      });\n      let errorItems = uploadCollection.findItems((entry) => {\n        return !!entry.getValue('uploadError') || !!entry.getValue('validationErrorMsg');\n      });\n      if (uploadCollection.size - errorItems.length === loadedItems.length) {\n        let data = this.getOutputData((dataItem) => {\n          return !!dataItem.getValue('fileInfo') && !dataItem.getValue('silentUpload');\n        });\n        data.length > 0 &&\n          EventManager.emit(\n            new EventData({\n              type: EVENT_TYPES.UPLOAD_FINISH,\n              ctx: this.ctxName,\n              data,\n            })\n          );\n      }\n    }\n    if (changeMap.uploadError) {\n      let items = uploadCollection.findItems((entry) => {\n        return !!entry.getValue('uploadError');\n      });\n      items.forEach((id) => {\n        EventManager.emit(\n          new EventData({\n            type: EVENT_TYPES.UPLOAD_ERROR,\n            ctx: this.ctxName,\n            data: uploadCollection.readProp(id, 'uploadError'),\n          }),\n          undefined,\n          false\n        );\n      });\n    }\n    if (changeMap.validationErrorMsg) {\n      let items = uploadCollection.findItems((entry) => {\n        return !!entry.getValue('validationErrorMsg');\n      });\n      items.forEach((id) => {\n        EventManager.emit(\n          new EventData({\n            type: EVENT_TYPES.VALIDATION_ERROR,\n            ctx: this.ctxName,\n            data: uploadCollection.readProp(id, 'validationErrorMsg'),\n          }),\n          undefined,\n          false\n        );\n      });\n    }\n    if (changeMap.cdnUrlModifiers) {\n      let items = uploadCollection.findItems((entry) => {\n        return !!entry.getValue('cdnUrlModifiers');\n      });\n      items.forEach((id) => {\n        EventManager.emit(\n          new EventData({\n            type: EVENT_TYPES.CDN_MODIFICATION,\n            ctx: this.ctxName,\n            data: Data.getCtx(id).store,\n          }),\n          undefined,\n          false\n        );\n      });\n    }\n  };\n\n  /** @returns {import('@uploadcare/upload-client').FileFromOptions} */\n  getUploadClientOptions() {\n    let store = this.getCssData('--cfg-store', true);\n    let options = {\n      // undefined 'store' means 'auto'\n      store: store === null ? undefined : !!store,\n      publicKey: this.getCssData('--cfg-pubkey'),\n      baseCDN: this.getCssData('--cfg-cdn-cname'),\n      baseURL: this.getCssData('--cfg-base-url'),\n      userAgent: customUserAgent,\n      integration: this.getCssData('--cfg-user-agent-integration'),\n      secureSignature: this.getCssData('--cfg-secure-signature'),\n      secureExpire: this.getCssData('--cfg-secure-expire'),\n      retryThrottledRequestMaxTimes: this.getCssData('--cfg-retry-throttled-request-max-times'),\n      multipartMinFileSize: this.getCssData('--cfg-multipart-min-file-size'),\n      multipartChunkSize: this.getCssData('--cfg-multipart-chunk-size'),\n      maxConcurrentRequests: this.getCssData('--cfg-multipart-max-concurrent-requests'),\n      multipartMaxAttempts: this.getCssData('--cfg-multipart-max-attempts'),\n      checkForUrlDuplicates: !!this.getCssData('--cfg-check-for-url-duplicates'),\n      saveUrlForRecurrentUploads: !!this.getCssData('--cfg-save-url-for-recurrent-uploads'),\n      metadata: this.$['*uploadMetadata'],\n    };\n\n    console.log('Upload client options:', options);\n\n    return options;\n  }\n\n  /** @param {(item: import('./TypedData.js').TypedData) => Boolean} checkFn */\n  getOutputData(checkFn) {\n    // @ts-ignore TODO: fix this\n    let data = [];\n    let items = this.uploadCollection.findItems(checkFn);\n    items.forEach((itemId) => {\n      let uploadEntryData = Data.getCtx(itemId).store;\n      /** @type {import('@uploadcare/upload-client').UploadcareFile} */\n      let fileInfo = uploadEntryData.fileInfo || {\n        name: uploadEntryData.fileName,\n        fileSize: uploadEntryData.fileSize,\n        isImage: uploadEntryData.isImage,\n        mimeType: uploadEntryData.mimeType,\n      };\n      let outputItem = {\n        ...fileInfo,\n        cdnUrlModifiers: uploadEntryData.cdnUrlModifiers,\n        cdnUrl: uploadEntryData.cdnUrl || fileInfo.cdnUrl,\n      };\n      data.push(outputItem);\n    });\n    // @ts-ignore TODO: fix this\n    return data;\n  }\n}\n\n/** @enum {String} */\nUploaderBlock.extSrcList = Object.freeze({\n  FACEBOOK: 'facebook',\n  DROPBOX: 'dropbox',\n  GDRIVE: 'gdrive',\n  GPHOTOS: 'gphotos',\n  INSTAGRAM: 'instagram',\n  FLICKR: 'flickr',\n  VK: 'vk',\n  EVERNOTE: 'evernote',\n  BOX: 'box',\n  ONEDRIVE: 'onedrive',\n  HUDDLE: 'huddle',\n});\n\n/** @enum {String} */\nUploaderBlock.sourceTypes = Object.freeze({\n  LOCAL: 'local',\n  URL: 'url',\n  CAMERA: 'camera',\n  DRAW: 'draw',\n  ...UploaderBlock.extSrcList,\n});\n\nObject.values(EVENT_TYPES).forEach((eType) => {\n  let eName = EventManager.eName(eType);\n  window.addEventListener(eName, (e) => {\n    let outputTypes = [EVENT_TYPES.UPLOAD_FINISH, EVENT_TYPES.REMOVE, EVENT_TYPES.CDN_MODIFICATION];\n    // @ts-ignore TODO: fix this\n    if (outputTypes.includes(e.detail.type)) {\n      // @ts-ignore TODO: fix this\n      let dataCtx = Data.getCtx(e.detail.ctx);\n      /** @type {TypedCollection} */\n      let uploadCollection = dataCtx.read('uploadCollection');\n      // @ts-ignore TODO: fix this\n      let data = [];\n      uploadCollection.items().forEach((id) => {\n        let uploadEntryData = Data.getCtx(id).store;\n        /** @type {import('@uploadcare/upload-client').UploadcareFile} */\n        let fileInfo = uploadEntryData.fileInfo;\n        if (fileInfo) {\n          let outputItem = {\n            ...fileInfo,\n            cdnUrlModifiers: uploadEntryData.cdnUrlModifiers,\n            cdnUrl: uploadEntryData.cdnUrl || fileInfo.cdnUrl,\n          };\n          data.push(outputItem);\n        }\n      });\n      EventManager.emit(\n        new EventData({\n          type: EVENT_TYPES.DATA_OUTPUT,\n          // @ts-ignore TODO: fix this\n          ctx: e.detail.ctx,\n          // @ts-ignore TODO: fix this\n          data,\n        })\n      );\n      // @ts-ignore TODO: fix this\n      dataCtx.pub('outputData', data);\n    }\n  });\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
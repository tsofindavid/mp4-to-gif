{"ast":null,"code":"import _asyncToGenerator from \"/Users/David/Documents/own_projects/mp4-to-gif/packages/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Block } from '../../../abstract/Block.js';\nimport { constraintRect, minRectSize } from './crop-utils.js';\nimport { CROP_PADDING, MIN_CROP_SIZE } from './cropper-constants.js';\nimport { classNames } from './lib/classNames.js';\nimport { debounce } from './lib/debounce.js';\nimport { pick } from './lib/pick.js';\nimport { preloadImage } from './lib/preloadImage.js';\nimport { viewerImageSrc } from './util.js';\n\n/**\n * @typedef {Object} Operations\n * @property {boolean} flip\n * @property {boolean} mirror\n * @property {Number} rotate\n */\n\n/**\n * @param {Number} value\n * @param {Number} min\n * @param {Number} max\n * @returns {Number}\n */\nfunction clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * @param {import('./types.js').ImageSize} imageSize\n * @param {Number} angle\n * @returns {import('./types.js').ImageSize}\n */\nfunction rotateSize({\n  width,\n  height\n}, angle) {\n  let swap = angle / 90 % 2 !== 0;\n  return {\n    width: swap ? height : width,\n    height: swap ? width : height\n  };\n}\n\n/**\n * @param {import('./types.js').Transformations['crop']} crop\n * @returns {boolean}\n */\nfunction validateCrop(crop) {\n  if (!crop) {\n    return true;\n  }\n  /** @type {((arg: typeof crop) => boolean)[]} */\n  let shouldMatch = [({\n    dimensions,\n    coords\n  }) => [...dimensions, ...coords].every(number => Number.isInteger(number) && Number.isFinite(number)), ({\n    dimensions,\n    coords\n  }) => dimensions.every(d => d > 0) && coords.every(c => c >= 0)];\n  return shouldMatch.every(matcher => matcher(crop));\n}\nexport class EditorImageCropper extends Block {\n  init$ = {\n    ...this.init$,\n    image: null,\n    '*padding': CROP_PADDING,\n    /** @type {Operations} */\n    '*operations': {\n      rotate: 0,\n      mirror: false,\n      flip: false\n    },\n    /** @type {import('./types.js').Rectangle} */\n    '*imageBox': {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    /** @type {import('./types.js').Rectangle} */\n    '*cropBox': {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    }\n  };\n  constructor() {\n    super();\n\n    /** @private */\n    this._commitDebounced = debounce(this._commit.bind(this), 300);\n\n    /** @private */\n    this._handleResizeDebounced = debounce(this._handleResize.bind(this), 10);\n  }\n\n  /** @private */\n  _handleResize() {\n    if (!this.isConnected) {\n      return;\n    }\n    this.deactivate();\n    this.activate(this._imageSize, {\n      fromViewer: false\n    });\n  }\n\n  /** @private */\n  _syncTransformations() {\n    let transformations = this.$['*editorTransformations'];\n    let pickedTransformations = pick(transformations, Object.keys(this.$['*operations']));\n    let operations = {\n      ...this.$['*operations'],\n      ...pickedTransformations\n    };\n    this.$['*operations'] = operations;\n  }\n\n  /** @private */\n  _initCanvas() {\n    /** @type {HTMLCanvasElement} */\n    let canvas = this.ref['canvas-el'];\n    let ctx = canvas.getContext('2d');\n    let width = this.offsetWidth;\n    let height = this.offsetHeight;\n    let dpr = window.devicePixelRatio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    canvas.width = width * dpr;\n    canvas.height = height * dpr;\n    ctx.scale(dpr, dpr);\n    this._canvas = canvas;\n    this._ctx = ctx;\n  }\n\n  /** @private */\n  _alignImage() {\n    if (!this._isActive || !this.$.image) {\n      return;\n    }\n    let image = this.$.image;\n    let padding = this.$['*padding'];\n    let operations = this.$['*operations'];\n    let {\n      rotate\n    } = operations;\n    let bounds = {\n      width: this.offsetWidth,\n      height: this.offsetHeight\n    };\n    let naturalSize = rotateSize({\n      width: image.naturalWidth,\n      height: image.naturalHeight\n    }, rotate);\n    if (naturalSize.width > bounds.width - padding * 2 || naturalSize.height > bounds.height - padding * 2) {\n      let imageAspectRatio = naturalSize.width / naturalSize.height;\n      let viewportAspectRatio = bounds.width / bounds.height;\n      if (imageAspectRatio > viewportAspectRatio) {\n        let width = bounds.width - padding * 2;\n        let height = width / imageAspectRatio;\n        let x = 0 + padding;\n        let y = padding + (bounds.height - padding * 2) / 2 - height / 2;\n        this.$['*imageBox'] = {\n          x,\n          y,\n          width,\n          height\n        };\n      } else {\n        let height = bounds.height - padding * 2;\n        let width = height * imageAspectRatio;\n        let x = padding + (bounds.width - padding * 2) / 2 - width / 2;\n        let y = 0 + padding;\n        this.$['*imageBox'] = {\n          x,\n          y,\n          width,\n          height\n        };\n      }\n    } else {\n      let {\n        width,\n        height\n      } = naturalSize;\n      let x = padding + (bounds.width - padding * 2) / 2 - width / 2;\n      let y = padding + (bounds.height - padding * 2) / 2 - height / 2;\n      this.$['*imageBox'] = {\n        x,\n        y,\n        width,\n        height\n      };\n    }\n  }\n\n  /** @private */\n  _alignCrop() {\n    let cropBox = this.$['*cropBox'];\n    let imageBox = this.$['*imageBox'];\n    let operations = this.$['*operations'];\n    let {\n      rotate\n    } = operations;\n    let transformation = this.$['*editorTransformations']['crop'];\n    if (transformation) {\n      let {\n        dimensions: [width, height],\n        coords: [x, y]\n      } = transformation;\n      let {\n        width: previewWidth,\n        x: previewX,\n        y: previewY\n      } = this.$['*imageBox'];\n      let {\n        width: sourceWidth\n      } = rotateSize(this._imageSize, rotate);\n      let ratio = previewWidth / sourceWidth;\n      cropBox = {\n        x: previewX + x * ratio,\n        y: previewY + y * ratio,\n        width: width * ratio,\n        height: height * ratio\n      };\n    } else {\n      cropBox = {\n        x: imageBox.x,\n        y: imageBox.y,\n        width: imageBox.width,\n        height: imageBox.height\n      };\n    }\n    /** @type {[Number, Number]} */\n    let minCropRect = [Math.min(imageBox.width, MIN_CROP_SIZE), Math.min(imageBox.height, MIN_CROP_SIZE)];\n    cropBox = minRectSize(cropBox, minCropRect, 'se');\n    cropBox = constraintRect(cropBox, imageBox);\n    this.$['*cropBox'] = cropBox;\n  }\n\n  /** @private */\n  _drawImage() {\n    let image = this.$.image;\n    let imageBox = this.$['*imageBox'];\n    let operations = this.$['*operations'];\n    let {\n      mirror,\n      flip,\n      rotate\n    } = operations;\n    let ctx = this._ctx;\n    let rotated = rotateSize({\n      width: imageBox.width,\n      height: imageBox.height\n    }, rotate);\n    ctx.save();\n    ctx.translate(imageBox.x + imageBox.width / 2, imageBox.y + imageBox.height / 2);\n    ctx.rotate(rotate * Math.PI * -1 / 180);\n    ctx.scale(mirror ? -1 : 1, flip ? -1 : 1);\n    ctx.drawImage(image, -rotated.width / 2, -rotated.height / 2, rotated.width, rotated.height);\n    ctx.restore();\n  }\n\n  /** @private */\n  _draw() {\n    if (!this._isActive || !this.$.image) {\n      return;\n    }\n    let canvas = this._canvas;\n    let ctx = this._ctx;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    this._drawImage();\n  }\n\n  /** @private */\n  _animateIn({\n    fromViewer\n  }) {\n    if (this.$.image) {\n      this.ref['frame-el'].toggleThumbs(true);\n      this._transitionToImage();\n      setTimeout(() => {\n        this.className = classNames({\n          active_from_viewer: fromViewer,\n          active_from_editor: !fromViewer,\n          inactive_to_editor: false\n        });\n      });\n    }\n  }\n\n  /**\n   * @private\n   * @returns {import('./types.js').Transformations['crop']['dimensions']}\n   */\n  _calculateDimensions() {\n    let cropBox = this.$['*cropBox'];\n    let imageBox = this.$['*imageBox'];\n    let operations = this.$['*operations'];\n    let {\n      rotate\n    } = operations;\n    let {\n      width: previewWidth,\n      height: previewHeight\n    } = imageBox;\n    let {\n      width: sourceWidth,\n      height: sourceHeight\n    } = rotateSize(this._imageSize, rotate);\n    let {\n      width: cropWidth,\n      height: cropHeight\n    } = cropBox;\n    let ratioW = previewWidth / sourceWidth;\n    let ratioH = previewHeight / sourceHeight;\n\n    /** @type {[Number, Number]} */\n    let dimensions = [clamp(Math.round(cropWidth / ratioW), 1, sourceWidth), clamp(Math.round(cropHeight / ratioH), 1, sourceHeight)];\n    return dimensions;\n  }\n\n  /**\n   * @private\n   * @returns {import('./types.js').Transformations['crop']}\n   */\n  _calculateCrop() {\n    let cropBox = this.$['*cropBox'];\n    let imageBox = this.$['*imageBox'];\n    let operations = this.$['*operations'];\n    let {\n      rotate\n    } = operations;\n    let {\n      width: previewWidth,\n      height: previewHeight,\n      x: previewX,\n      y: previewY\n    } = imageBox;\n    let {\n      width: sourceWidth,\n      height: sourceHeight\n    } = rotateSize(this._imageSize, rotate);\n    let {\n      x: cropX,\n      y: cropY\n    } = cropBox;\n    let ratioW = previewWidth / sourceWidth;\n    let ratioH = previewHeight / sourceHeight;\n    let dimensions = this._calculateDimensions();\n    let crop = {\n      dimensions,\n      coords: ( /** @type {[Number, Number]} */[clamp(Math.round((cropX - previewX) / ratioW), 0, sourceWidth - dimensions[0]), clamp(Math.round((cropY - previewY) / ratioH), 0, sourceHeight - dimensions[1])])\n    };\n    if (!validateCrop(crop)) {\n      console.error('Cropper is trying to create invalid crop object', {\n        payload: crop\n      });\n      return undefined;\n    }\n    if (dimensions[0] === sourceWidth && dimensions[1] === sourceHeight) {\n      return undefined;\n    }\n    return crop;\n  }\n\n  /** @private */\n  _commit() {\n    if (!this.isConnected) {\n      return;\n    }\n    let operations = this.$['*operations'];\n    let {\n      rotate,\n      mirror,\n      flip\n    } = operations;\n    let crop = this._calculateCrop();\n    /** @type {import('./types.js').Transformations} */\n    let editorTransformations = this.$['*editorTransformations'];\n    let transformations = {\n      ...editorTransformations,\n      crop,\n      rotate,\n      mirror,\n      flip\n    };\n    this.$['*editorTransformations'] = transformations;\n  }\n\n  /**\n   * @param {String} operation\n   * @param {Number} value\n   * @returns {void}\n   */\n  setValue(operation, value) {\n    console.log(`Apply cropper operation [${operation}=${value}]`);\n    this.$['*operations'] = {\n      ...this.$['*operations'],\n      [operation]: value\n    };\n    if (!this._isActive) {\n      return;\n    }\n    this._alignImage();\n    this._alignCrop();\n    this._draw();\n  }\n\n  /**\n   * @param {keyof Operations} operation\n   * @returns {Number | boolean}\n   */\n  getValue(operation) {\n    return this.$['*operations'][operation];\n  }\n\n  /**\n   * @param {import('./types.js').ImageSize} imageSize\n   * @param {{ fromViewer?: boolean }} options\n   */\n  activate(imageSize, {\n    fromViewer\n  }) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this._isActive) {\n        return;\n      }\n      _this._isActive = true;\n      _this._imageSize = imageSize;\n      _this.removeEventListener('transitionend', _this._reset);\n      _this._initCanvas();\n      try {\n        _this.$.image = yield _this._waitForImage(_this.$['*originalUrl'], _this.$['*editorTransformations']);\n        _this._syncTransformations();\n        _this._alignImage();\n        _this._alignCrop();\n        _this._draw();\n        _this._animateIn({\n          fromViewer\n        });\n      } catch (err) {\n        console.error('Failed to activate cropper', {\n          error: err\n        });\n      }\n    })();\n  }\n  deactivate() {\n    if (!this._isActive) {\n      return;\n    }\n    this._commit();\n    this._isActive = false;\n    this._transitionToCrop();\n    this.className = classNames({\n      active_from_viewer: false,\n      active_from_editor: false,\n      inactive_to_editor: true\n    });\n    this.ref['frame-el'].toggleThumbs(false);\n    this.addEventListener('transitionend', this._reset, {\n      once: true\n    });\n  }\n\n  /** @private */\n  _transitionToCrop() {\n    let dimensions = this._calculateDimensions();\n    let scaleX = Math.min(this.offsetWidth, dimensions[0]) / this.$['*cropBox'].width;\n    let scaleY = Math.min(this.offsetHeight, dimensions[1]) / this.$['*cropBox'].height;\n    let scale = Math.min(scaleX, scaleY);\n    let cropCenterX = this.$['*cropBox'].x + this.$['*cropBox'].width / 2;\n    let cropCenterY = this.$['*cropBox'].y + this.$['*cropBox'].height / 2;\n    this.style.transform = `scale(${scale}) translate(${(this.offsetWidth / 2 - cropCenterX) / scale}px, ${(this.offsetHeight / 2 - cropCenterY) / scale}px)`;\n    this.style.transformOrigin = `${cropCenterX}px ${cropCenterY}px`;\n  }\n\n  /** @private */\n  _transitionToImage() {\n    let cropCenterX = this.$['*cropBox'].x + this.$['*cropBox'].width / 2;\n    let cropCenterY = this.$['*cropBox'].y + this.$['*cropBox'].height / 2;\n    this.style.transform = `scale(1)`;\n    this.style.transformOrigin = `${cropCenterX}px ${cropCenterY}px`;\n  }\n\n  /** @private */\n  _reset() {\n    if (this._isActive) {\n      return;\n    }\n    this.$.image = null;\n  }\n\n  /**\n   * @private\n   * @param {String} originalUrl\n   * @param {import('./types.js').Transformations} transformations\n   * @returns {Promise<HTMLImageElement>}\n   */\n  _waitForImage(originalUrl, transformations) {\n    let width = this.offsetWidth;\n    transformations = {\n      ...transformations,\n      crop: undefined,\n      rotate: undefined,\n      flip: undefined,\n      mirror: undefined\n    };\n    let src = this.proxyUrl(viewerImageSrc(originalUrl, width, transformations));\n    let {\n      promise,\n      cancel,\n      image\n    } = preloadImage(src);\n    let stop = this._handleImageLoading(src);\n    image.addEventListener('load', stop, {\n      once: true\n    });\n    image.addEventListener('error', stop, {\n      once: true\n    });\n    this._cancelPreload && this._cancelPreload();\n    this._cancelPreload = cancel;\n    return promise.then(() => image).catch(err => {\n      console.error('Failed to load image', {\n        error: err\n      });\n      this.$['*networkProblems'] = true;\n      return Promise.resolve(image);\n    });\n  }\n\n  /**\n   * @private\n   * @param {String} src\n   * @returns {() => void} Destructor\n   */\n  _handleImageLoading(src) {\n    let operation = 'crop';\n    let loadingOperations = this.$['*loadingOperations'];\n    if (!loadingOperations.get(operation)) {\n      loadingOperations.set(operation, new Map());\n    }\n    if (!loadingOperations.get(operation).get(src)) {\n      loadingOperations.set(operation, loadingOperations.get(operation).set(src, true));\n      this.$['*loadingOperations'] = loadingOperations;\n    }\n    return () => {\n      if (loadingOperations?.get(operation)?.has(src)) {\n        loadingOperations.get(operation).delete(src);\n        this.$['*loadingOperations'] = loadingOperations;\n      }\n    };\n  }\n  initCallback() {\n    super.initCallback();\n    this._observer = new ResizeObserver(([entry]) => {\n      const nonZeroSize = entry.contentRect.width > 0 && entry.contentRect.height > 0;\n      if (nonZeroSize && this._isActive && this.$.image) {\n        this._handleResizeDebounced();\n      }\n    });\n    this._observer.observe(this);\n    this.sub('*imageBox', () => {\n      this._draw();\n    });\n    this.sub('*cropBox', cropBox => {\n      if (this.$.image) {\n        this._commitDebounced();\n      }\n    });\n    setTimeout(() => {\n      this.sub('*networkProblems', networkProblems => {\n        if (!networkProblems) {\n          this._isActive && this.activate(this._imageSize, {\n            fromViewer: false\n          });\n        }\n      });\n    }, 0);\n  }\n  destroyCallback() {\n    super.destroyCallback();\n    this._observer?.disconnect();\n  }\n}\nEditorImageCropper.template = /* HTML */`\n  <canvas class=\"canvas\" ref=\"canvas-el\"></canvas>\n  <lr-crop-frame ref=\"frame-el\"></lr-crop-frame>\n`;","map":{"version":3,"names":["Block","constraintRect","minRectSize","CROP_PADDING","MIN_CROP_SIZE","classNames","debounce","pick","preloadImage","viewerImageSrc","clamp","value","min","max","Math","rotateSize","width","height","angle","swap","validateCrop","crop","shouldMatch","dimensions","coords","every","number","Number","isInteger","isFinite","d","c","matcher","EditorImageCropper","init$","image","rotate","mirror","flip","x","y","constructor","_commitDebounced","_commit","bind","_handleResizeDebounced","_handleResize","isConnected","deactivate","activate","_imageSize","fromViewer","_syncTransformations","transformations","$","pickedTransformations","Object","keys","operations","_initCanvas","canvas","ref","ctx","getContext","offsetWidth","offsetHeight","dpr","window","devicePixelRatio","style","scale","_canvas","_ctx","_alignImage","_isActive","padding","bounds","naturalSize","naturalWidth","naturalHeight","imageAspectRatio","viewportAspectRatio","_alignCrop","cropBox","imageBox","transformation","previewWidth","previewX","previewY","sourceWidth","ratio","minCropRect","_drawImage","rotated","save","translate","PI","drawImage","restore","_draw","clearRect","_animateIn","toggleThumbs","_transitionToImage","setTimeout","className","active_from_viewer","active_from_editor","inactive_to_editor","_calculateDimensions","previewHeight","sourceHeight","cropWidth","cropHeight","ratioW","ratioH","round","_calculateCrop","cropX","cropY","console","error","payload","undefined","editorTransformations","setValue","operation","log","getValue","imageSize","_this","_asyncToGenerator","removeEventListener","_reset","_waitForImage","err","_transitionToCrop","addEventListener","once","scaleX","scaleY","cropCenterX","cropCenterY","transform","transformOrigin","originalUrl","src","proxyUrl","promise","cancel","stop","_handleImageLoading","_cancelPreload","then","catch","Promise","resolve","loadingOperations","get","set","Map","has","delete","initCallback","_observer","ResizeObserver","entry","nonZeroSize","contentRect","observe","sub","networkProblems","destroyCallback","disconnect","template"],"sources":["/Users/David/Documents/own_projects/mp4-to-gif/node_modules/@uploadcare/blocks/blocks/CloudImageEditor/src/EditorImageCropper.js"],"sourcesContent":["import { Block } from '../../../abstract/Block.js';\nimport { constraintRect, minRectSize } from './crop-utils.js';\nimport { CROP_PADDING, MIN_CROP_SIZE } from './cropper-constants.js';\nimport { classNames } from './lib/classNames.js';\nimport { debounce } from './lib/debounce.js';\nimport { pick } from './lib/pick.js';\nimport { preloadImage } from './lib/preloadImage.js';\nimport { viewerImageSrc } from './util.js';\n\n/**\n * @typedef {Object} Operations\n * @property {boolean} flip\n * @property {boolean} mirror\n * @property {Number} rotate\n */\n\n/**\n * @param {Number} value\n * @param {Number} min\n * @param {Number} max\n * @returns {Number}\n */\nfunction clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * @param {import('./types.js').ImageSize} imageSize\n * @param {Number} angle\n * @returns {import('./types.js').ImageSize}\n */\nfunction rotateSize({ width, height }, angle) {\n  let swap = (angle / 90) % 2 !== 0;\n  return { width: swap ? height : width, height: swap ? width : height };\n}\n\n/**\n * @param {import('./types.js').Transformations['crop']} crop\n * @returns {boolean}\n */\nfunction validateCrop(crop) {\n  if (!crop) {\n    return true;\n  }\n  /** @type {((arg: typeof crop) => boolean)[]} */\n  let shouldMatch = [\n    ({ dimensions, coords }) =>\n      [...dimensions, ...coords].every((number) => Number.isInteger(number) && Number.isFinite(number)),\n    ({ dimensions, coords }) => dimensions.every((d) => d > 0) && coords.every((c) => c >= 0),\n  ];\n  return shouldMatch.every((matcher) => matcher(crop));\n}\n\nexport class EditorImageCropper extends Block {\n  init$ = {\n    ...this.init$,\n    image: null,\n    '*padding': CROP_PADDING,\n    /** @type {Operations} */\n    '*operations': {\n      rotate: 0,\n      mirror: false,\n      flip: false,\n    },\n    /** @type {import('./types.js').Rectangle} */\n    '*imageBox': {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n    },\n    /** @type {import('./types.js').Rectangle} */\n    '*cropBox': {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n    },\n  };\n\n  constructor() {\n    super();\n\n    /** @private */\n    this._commitDebounced = debounce(this._commit.bind(this), 300);\n\n    /** @private */\n    this._handleResizeDebounced = debounce(this._handleResize.bind(this), 10);\n  }\n\n  /** @private */\n  _handleResize() {\n    if (!this.isConnected) {\n      return;\n    }\n    this.deactivate();\n    this.activate(this._imageSize, { fromViewer: false });\n  }\n\n  /** @private */\n  _syncTransformations() {\n    let transformations = this.$['*editorTransformations'];\n    let pickedTransformations = pick(transformations, Object.keys(this.$['*operations']));\n    let operations = { ...this.$['*operations'], ...pickedTransformations };\n    this.$['*operations'] = operations;\n  }\n\n  /** @private */\n  _initCanvas() {\n    /** @type {HTMLCanvasElement} */\n    let canvas = this.ref['canvas-el'];\n    let ctx = canvas.getContext('2d');\n\n    let width = this.offsetWidth;\n    let height = this.offsetHeight;\n    let dpr = window.devicePixelRatio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    canvas.width = width * dpr;\n    canvas.height = height * dpr;\n    ctx.scale(dpr, dpr);\n\n    this._canvas = canvas;\n    this._ctx = ctx;\n  }\n\n  /** @private */\n  _alignImage() {\n    if (!this._isActive || !this.$.image) {\n      return;\n    }\n\n    let image = this.$.image;\n    let padding = this.$['*padding'];\n    let operations = this.$['*operations'];\n    let { rotate } = operations;\n\n    let bounds = { width: this.offsetWidth, height: this.offsetHeight };\n    let naturalSize = rotateSize({ width: image.naturalWidth, height: image.naturalHeight }, rotate);\n\n    if (naturalSize.width > bounds.width - padding * 2 || naturalSize.height > bounds.height - padding * 2) {\n      let imageAspectRatio = naturalSize.width / naturalSize.height;\n      let viewportAspectRatio = bounds.width / bounds.height;\n\n      if (imageAspectRatio > viewportAspectRatio) {\n        let width = bounds.width - padding * 2;\n        let height = width / imageAspectRatio;\n        let x = 0 + padding;\n        let y = padding + (bounds.height - padding * 2) / 2 - height / 2;\n        this.$['*imageBox'] = { x, y, width, height };\n      } else {\n        let height = bounds.height - padding * 2;\n        let width = height * imageAspectRatio;\n        let x = padding + (bounds.width - padding * 2) / 2 - width / 2;\n        let y = 0 + padding;\n        this.$['*imageBox'] = { x, y, width, height };\n      }\n    } else {\n      let { width, height } = naturalSize;\n      let x = padding + (bounds.width - padding * 2) / 2 - width / 2;\n      let y = padding + (bounds.height - padding * 2) / 2 - height / 2;\n      this.$['*imageBox'] = { x, y, width, height };\n    }\n  }\n\n  /** @private */\n  _alignCrop() {\n    let cropBox = this.$['*cropBox'];\n    let imageBox = this.$['*imageBox'];\n    let operations = this.$['*operations'];\n    let { rotate } = operations;\n    let transformation = this.$['*editorTransformations']['crop'];\n\n    if (transformation) {\n      let {\n        dimensions: [width, height],\n        coords: [x, y],\n      } = transformation;\n      let { width: previewWidth, x: previewX, y: previewY } = this.$['*imageBox'];\n      let { width: sourceWidth } = rotateSize(this._imageSize, rotate);\n      let ratio = previewWidth / sourceWidth;\n      cropBox = {\n        x: previewX + x * ratio,\n        y: previewY + y * ratio,\n        width: width * ratio,\n        height: height * ratio,\n      };\n    } else {\n      cropBox = {\n        x: imageBox.x,\n        y: imageBox.y,\n        width: imageBox.width,\n        height: imageBox.height,\n      };\n    }\n    /** @type {[Number, Number]} */\n    let minCropRect = [Math.min(imageBox.width, MIN_CROP_SIZE), Math.min(imageBox.height, MIN_CROP_SIZE)];\n    cropBox = minRectSize(cropBox, minCropRect, 'se');\n    cropBox = constraintRect(cropBox, imageBox);\n\n    this.$['*cropBox'] = cropBox;\n  }\n\n  /** @private */\n  _drawImage() {\n    let image = this.$.image;\n    let imageBox = this.$['*imageBox'];\n    let operations = this.$['*operations'];\n    let { mirror, flip, rotate } = operations;\n    let ctx = this._ctx;\n    let rotated = rotateSize({ width: imageBox.width, height: imageBox.height }, rotate);\n    ctx.save();\n    ctx.translate(imageBox.x + imageBox.width / 2, imageBox.y + imageBox.height / 2);\n    ctx.rotate((rotate * Math.PI * -1) / 180);\n    ctx.scale(mirror ? -1 : 1, flip ? -1 : 1);\n    ctx.drawImage(image, -rotated.width / 2, -rotated.height / 2, rotated.width, rotated.height);\n    ctx.restore();\n  }\n\n  /** @private */\n  _draw() {\n    if (!this._isActive || !this.$.image) {\n      return;\n    }\n    let canvas = this._canvas;\n    let ctx = this._ctx;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    this._drawImage();\n  }\n\n  /** @private */\n  _animateIn({ fromViewer }) {\n    if (this.$.image) {\n      this.ref['frame-el'].toggleThumbs(true);\n      this._transitionToImage();\n      setTimeout(() => {\n        this.className = classNames({\n          active_from_viewer: fromViewer,\n          active_from_editor: !fromViewer,\n          inactive_to_editor: false,\n        });\n      });\n    }\n  }\n\n  /**\n   * @private\n   * @returns {import('./types.js').Transformations['crop']['dimensions']}\n   */\n  _calculateDimensions() {\n    let cropBox = this.$['*cropBox'];\n    let imageBox = this.$['*imageBox'];\n    let operations = this.$['*operations'];\n    let { rotate } = operations;\n    let { width: previewWidth, height: previewHeight } = imageBox;\n    let { width: sourceWidth, height: sourceHeight } = rotateSize(this._imageSize, rotate);\n    let { width: cropWidth, height: cropHeight } = cropBox;\n    let ratioW = previewWidth / sourceWidth;\n    let ratioH = previewHeight / sourceHeight;\n\n    /** @type {[Number, Number]} */\n    let dimensions = [\n      clamp(Math.round(cropWidth / ratioW), 1, sourceWidth),\n      clamp(Math.round(cropHeight / ratioH), 1, sourceHeight),\n    ];\n\n    return dimensions;\n  }\n\n  /**\n   * @private\n   * @returns {import('./types.js').Transformations['crop']}\n   */\n  _calculateCrop() {\n    let cropBox = this.$['*cropBox'];\n    let imageBox = this.$['*imageBox'];\n    let operations = this.$['*operations'];\n    let { rotate } = operations;\n    let { width: previewWidth, height: previewHeight, x: previewX, y: previewY } = imageBox;\n    let { width: sourceWidth, height: sourceHeight } = rotateSize(this._imageSize, rotate);\n    let { x: cropX, y: cropY } = cropBox;\n    let ratioW = previewWidth / sourceWidth;\n    let ratioH = previewHeight / sourceHeight;\n\n    let dimensions = this._calculateDimensions();\n    let crop = {\n      dimensions,\n      coords: /** @type {[Number, Number]} */ ([\n        clamp(Math.round((cropX - previewX) / ratioW), 0, sourceWidth - dimensions[0]),\n        clamp(Math.round((cropY - previewY) / ratioH), 0, sourceHeight - dimensions[1]),\n      ]),\n    };\n    if (!validateCrop(crop)) {\n      console.error('Cropper is trying to create invalid crop object', {\n        payload: crop,\n      });\n      return undefined;\n    }\n    if (dimensions[0] === sourceWidth && dimensions[1] === sourceHeight) {\n      return undefined;\n    }\n\n    return crop;\n  }\n\n  /** @private */\n  _commit() {\n    if (!this.isConnected) {\n      return;\n    }\n    let operations = this.$['*operations'];\n    let { rotate, mirror, flip } = operations;\n    let crop = this._calculateCrop();\n    /** @type {import('./types.js').Transformations} */\n    let editorTransformations = this.$['*editorTransformations'];\n    let transformations = {\n      ...editorTransformations,\n      crop,\n      rotate,\n      mirror,\n      flip,\n    };\n\n    this.$['*editorTransformations'] = transformations;\n  }\n\n  /**\n   * @param {String} operation\n   * @param {Number} value\n   * @returns {void}\n   */\n  setValue(operation, value) {\n    console.log(`Apply cropper operation [${operation}=${value}]`);\n    this.$['*operations'] = {\n      ...this.$['*operations'],\n      [operation]: value,\n    };\n\n    if (!this._isActive) {\n      return;\n    }\n\n    this._alignImage();\n    this._alignCrop();\n    this._draw();\n  }\n\n  /**\n   * @param {keyof Operations} operation\n   * @returns {Number | boolean}\n   */\n  getValue(operation) {\n    return this.$['*operations'][operation];\n  }\n\n  /**\n   * @param {import('./types.js').ImageSize} imageSize\n   * @param {{ fromViewer?: boolean }} options\n   */\n  async activate(imageSize, { fromViewer }) {\n    if (this._isActive) {\n      return;\n    }\n    this._isActive = true;\n    this._imageSize = imageSize;\n    this.removeEventListener('transitionend', this._reset);\n    this._initCanvas();\n\n    try {\n      this.$.image = await this._waitForImage(this.$['*originalUrl'], this.$['*editorTransformations']);\n      this._syncTransformations();\n      this._alignImage();\n      this._alignCrop();\n      this._draw();\n      this._animateIn({ fromViewer });\n    } catch (err) {\n      console.error('Failed to activate cropper', { error: err });\n    }\n  }\n  deactivate() {\n    if (!this._isActive) {\n      return;\n    }\n    this._commit();\n    this._isActive = false;\n\n    this._transitionToCrop();\n\n    this.className = classNames({\n      active_from_viewer: false,\n      active_from_editor: false,\n      inactive_to_editor: true,\n    });\n\n    this.ref['frame-el'].toggleThumbs(false);\n    this.addEventListener('transitionend', this._reset, { once: true });\n  }\n\n  /** @private */\n  _transitionToCrop() {\n    let dimensions = this._calculateDimensions();\n    let scaleX = Math.min(this.offsetWidth, dimensions[0]) / this.$['*cropBox'].width;\n    let scaleY = Math.min(this.offsetHeight, dimensions[1]) / this.$['*cropBox'].height;\n    let scale = Math.min(scaleX, scaleY);\n    let cropCenterX = this.$['*cropBox'].x + this.$['*cropBox'].width / 2;\n    let cropCenterY = this.$['*cropBox'].y + this.$['*cropBox'].height / 2;\n\n    this.style.transform = `scale(${scale}) translate(${(this.offsetWidth / 2 - cropCenterX) / scale}px, ${\n      (this.offsetHeight / 2 - cropCenterY) / scale\n    }px)`;\n    this.style.transformOrigin = `${cropCenterX}px ${cropCenterY}px`;\n  }\n\n  /** @private */\n  _transitionToImage() {\n    let cropCenterX = this.$['*cropBox'].x + this.$['*cropBox'].width / 2;\n    let cropCenterY = this.$['*cropBox'].y + this.$['*cropBox'].height / 2;\n\n    this.style.transform = `scale(1)`;\n    this.style.transformOrigin = `${cropCenterX}px ${cropCenterY}px`;\n  }\n\n  /** @private */\n  _reset() {\n    if (this._isActive) {\n      return;\n    }\n    this.$.image = null;\n  }\n\n  /**\n   * @private\n   * @param {String} originalUrl\n   * @param {import('./types.js').Transformations} transformations\n   * @returns {Promise<HTMLImageElement>}\n   */\n  _waitForImage(originalUrl, transformations) {\n    let width = this.offsetWidth;\n    transformations = {\n      ...transformations,\n      crop: undefined,\n      rotate: undefined,\n      flip: undefined,\n      mirror: undefined,\n    };\n    let src = this.proxyUrl(viewerImageSrc(originalUrl, width, transformations));\n    let { promise, cancel, image } = preloadImage(src);\n\n    let stop = this._handleImageLoading(src);\n    image.addEventListener('load', stop, { once: true });\n    image.addEventListener('error', stop, { once: true });\n    this._cancelPreload && this._cancelPreload();\n    this._cancelPreload = cancel;\n\n    return promise\n      .then(() => image)\n      .catch((err) => {\n        console.error('Failed to load image', { error: err });\n        this.$['*networkProblems'] = true;\n        return Promise.resolve(image);\n      });\n  }\n\n  /**\n   * @private\n   * @param {String} src\n   * @returns {() => void} Destructor\n   */\n  _handleImageLoading(src) {\n    let operation = 'crop';\n    let loadingOperations = this.$['*loadingOperations'];\n    if (!loadingOperations.get(operation)) {\n      loadingOperations.set(operation, new Map());\n    }\n\n    if (!loadingOperations.get(operation).get(src)) {\n      loadingOperations.set(operation, loadingOperations.get(operation).set(src, true));\n      this.$['*loadingOperations'] = loadingOperations;\n    }\n\n    return () => {\n      if (loadingOperations?.get(operation)?.has(src)) {\n        loadingOperations.get(operation).delete(src);\n        this.$['*loadingOperations'] = loadingOperations;\n      }\n    };\n  }\n\n  initCallback() {\n    super.initCallback();\n\n    this._observer = new ResizeObserver(([entry]) => {\n      const nonZeroSize = entry.contentRect.width > 0 && entry.contentRect.height > 0;\n      if (nonZeroSize && this._isActive && this.$.image) {\n        this._handleResizeDebounced();\n      }\n    });\n    this._observer.observe(this);\n\n    this.sub('*imageBox', () => {\n      this._draw();\n    });\n\n    this.sub('*cropBox', (cropBox) => {\n      if (this.$.image) {\n        this._commitDebounced();\n      }\n    });\n\n    setTimeout(() => {\n      this.sub('*networkProblems', (networkProblems) => {\n        if (!networkProblems) {\n          this._isActive && this.activate(this._imageSize, { fromViewer: false });\n        }\n      });\n    }, 0);\n  }\n\n  destroyCallback() {\n    super.destroyCallback();\n    this._observer?.disconnect();\n  }\n}\n\nEditorImageCropper.template = /* HTML */ `\n  <canvas class=\"canvas\" ref=\"canvas-el\"></canvas>\n  <lr-crop-frame ref=\"frame-el\"></lr-crop-frame>\n`;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
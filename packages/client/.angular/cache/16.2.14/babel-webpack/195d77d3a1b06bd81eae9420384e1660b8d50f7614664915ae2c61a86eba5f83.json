{"ast":null,"code":"import { TRANSPARENT_PIXEL_SRC } from '../../../../utils/transparentPixelSrc.js';\nexport function preloadImage(src) {\n  let image = new Image();\n  let promise = new Promise((resolve, reject) => {\n    image.src = src;\n    image.onload = resolve;\n    image.onerror = reject;\n  });\n  let cancel = () => {\n    if (image.naturalWidth === 0) {\n      image.src = TRANSPARENT_PIXEL_SRC;\n    }\n  };\n  return {\n    promise,\n    image,\n    cancel\n  };\n}\nexport function batchPreloadImages(list) {\n  let preloaders = [];\n  for (let src of list) {\n    let preload = preloadImage(src);\n    preloaders.push(preload);\n  }\n  let images = preloaders.map(preload => preload.image);\n  let promise = Promise.allSettled(preloaders.map(preload => preload.promise));\n  let cancel = () => {\n    preloaders.forEach(preload => {\n      preload.cancel();\n    });\n  };\n  return {\n    promise,\n    images,\n    cancel\n  };\n}","map":{"version":3,"names":["TRANSPARENT_PIXEL_SRC","preloadImage","src","image","Image","promise","Promise","resolve","reject","onload","onerror","cancel","naturalWidth","batchPreloadImages","list","preloaders","preload","push","images","map","allSettled","forEach"],"sources":["/Users/David/Documents/own_projects/mp4-to-gif/node_modules/@uploadcare/blocks/blocks/CloudImageEditor/src/lib/preloadImage.js"],"sourcesContent":["import { TRANSPARENT_PIXEL_SRC } from '../../../../utils/transparentPixelSrc.js';\n\nexport function preloadImage(src) {\n  let image = new Image();\n\n  let promise = new Promise((resolve, reject) => {\n    image.src = src;\n    image.onload = resolve;\n    image.onerror = reject;\n  });\n\n  let cancel = () => {\n    if (image.naturalWidth === 0) {\n      image.src = TRANSPARENT_PIXEL_SRC;\n    }\n  };\n\n  return { promise, image, cancel };\n}\n\nexport function batchPreloadImages(list) {\n  let preloaders = [];\n\n  for (let src of list) {\n    let preload = preloadImage(src);\n    preloaders.push(preload);\n  }\n\n  let images = preloaders.map((preload) => preload.image);\n  let promise = Promise.allSettled(preloaders.map((preload) => preload.promise));\n  let cancel = () => {\n    preloaders.forEach((preload) => {\n      preload.cancel();\n    });\n  };\n\n  return { promise, images, cancel };\n}\n"],"mappings":"AAAA,SAASA,qBAAqB,QAAQ,0CAA0C;AAEhF,OAAO,SAASC,YAAYA,CAACC,GAAG,EAAE;EAChC,IAAIC,KAAK,GAAG,IAAIC,KAAK,CAAC,CAAC;EAEvB,IAAIC,OAAO,GAAG,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IAC7CL,KAAK,CAACD,GAAG,GAAGA,GAAG;IACfC,KAAK,CAACM,MAAM,GAAGF,OAAO;IACtBJ,KAAK,CAACO,OAAO,GAAGF,MAAM;EACxB,CAAC,CAAC;EAEF,IAAIG,MAAM,GAAGA,CAAA,KAAM;IACjB,IAAIR,KAAK,CAACS,YAAY,KAAK,CAAC,EAAE;MAC5BT,KAAK,CAACD,GAAG,GAAGF,qBAAqB;IACnC;EACF,CAAC;EAED,OAAO;IAAEK,OAAO;IAAEF,KAAK;IAAEQ;EAAO,CAAC;AACnC;AAEA,OAAO,SAASE,kBAAkBA,CAACC,IAAI,EAAE;EACvC,IAAIC,UAAU,GAAG,EAAE;EAEnB,KAAK,IAAIb,GAAG,IAAIY,IAAI,EAAE;IACpB,IAAIE,OAAO,GAAGf,YAAY,CAACC,GAAG,CAAC;IAC/Ba,UAAU,CAACE,IAAI,CAACD,OAAO,CAAC;EAC1B;EAEA,IAAIE,MAAM,GAAGH,UAAU,CAACI,GAAG,CAAEH,OAAO,IAAKA,OAAO,CAACb,KAAK,CAAC;EACvD,IAAIE,OAAO,GAAGC,OAAO,CAACc,UAAU,CAACL,UAAU,CAACI,GAAG,CAAEH,OAAO,IAAKA,OAAO,CAACX,OAAO,CAAC,CAAC;EAC9E,IAAIM,MAAM,GAAGA,CAAA,KAAM;IACjBI,UAAU,CAACM,OAAO,CAAEL,OAAO,IAAK;MAC9BA,OAAO,CAACL,MAAM,CAAC,CAAC;IAClB,CAAC,CAAC;EACJ,CAAC;EAED,OAAO;IAAEN,OAAO;IAAEa,MAAM;IAAEP;EAAO,CAAC;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
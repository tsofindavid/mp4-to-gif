{"ast":null,"code":"import { Block } from '../../../abstract/Block.js';\nimport { constraintRect, cornerPath, createSvgNode, expandRect, intersectionRect, minRectSize, moveRect, rectContainsPoint, setSvgNodeAttrs, sidePath, thumbCursor } from './crop-utils.js';\nimport { GUIDE_STROKE_WIDTH, GUIDE_THIRD, MIN_CROP_SIZE, THUMB_CORNER_SIZE, THUMB_OFFSET, THUMB_STROKE_WIDTH } from './cropper-constants.js';\nimport { classNames } from './lib/classNames.js';\nexport class CropFrame extends Block {\n  init$ = {\n    ...this.init$,\n    dragging: false\n  };\n  constructor() {\n    super();\n\n    /** @private */\n    this._handlePointerUp = this._handlePointerUp_.bind(this);\n\n    /** @private */\n    this._handlePointerMove = this._handlePointerMove_.bind(this);\n\n    /** @private */\n    this._handleSvgPointerMove = this._handleSvgPointerMove_.bind(this);\n  }\n  _shouldThumbBeDisabled(direction) {\n    let imageBox = this.$['*imageBox'];\n    if (!imageBox) {\n      return;\n    }\n    if (direction === '' && imageBox.height <= MIN_CROP_SIZE && imageBox.width <= MIN_CROP_SIZE) {\n      return true;\n    }\n    let tooHigh = imageBox.height <= MIN_CROP_SIZE && (direction.includes('n') || direction.includes('s'));\n    let tooWide = imageBox.width <= MIN_CROP_SIZE && (direction.includes('e') || direction.includes('w'));\n    return tooHigh || tooWide;\n  }\n  _createBackdrop() {\n    /** @type {import('./types.js').Rectangle} */\n    let cropBox = this.$['*cropBox'];\n    if (!cropBox) {\n      return;\n    }\n    let {\n      x,\n      y,\n      width,\n      height\n    } = cropBox;\n    let svg = this.ref['svg-el'];\n    let mask = createSvgNode('mask', {\n      id: 'backdrop-mask'\n    });\n    let maskRectOuter = createSvgNode('rect', {\n      x: 0,\n      y: 0,\n      width: '100%',\n      height: '100%',\n      fill: 'white'\n    });\n    let maskRectInner = createSvgNode('rect', {\n      x,\n      y,\n      width,\n      height,\n      fill: 'black'\n    });\n    mask.appendChild(maskRectOuter);\n    mask.appendChild(maskRectInner);\n    let backdropRect = createSvgNode('rect', {\n      x: 0,\n      y: 0,\n      width: '100%',\n      height: '100%',\n      fill: 'var(--color-image-background)',\n      'fill-opacity': 0.85,\n      mask: 'url(#backdrop-mask)'\n    });\n    svg.appendChild(backdropRect);\n    svg.appendChild(mask);\n    this._backdropMask = mask;\n    this._backdropMaskInner = maskRectInner;\n  }\n\n  /** Super tricky workaround for the chromium bug See https://bugs.chromium.org/p/chromium/issues/detail?id=330815 */\n  _resizeBackdrop() {\n    if (!this._backdropMask) {\n      return;\n    }\n    this._backdropMask.style.display = 'none';\n    window.requestAnimationFrame(() => {\n      this._backdropMask.style.display = 'block';\n    });\n  }\n  _updateBackdrop() {\n    /** @type {import('./types.js').Rectangle} */\n    let cropBox = this.$['*cropBox'];\n    if (!cropBox) {\n      return;\n    }\n    let {\n      x,\n      y,\n      width,\n      height\n    } = cropBox;\n    setSvgNodeAttrs(this._backdropMaskInner, {\n      x,\n      y,\n      width,\n      height\n    });\n  }\n  _updateFrame() {\n    /** @type {import('./types.js').Rectangle} */\n    let cropBox = this.$['*cropBox'];\n    if (!cropBox) {\n      return;\n    }\n    for (let thumb of Object.values(this._frameThumbs)) {\n      let {\n        direction,\n        pathNode,\n        interactionNode,\n        groupNode\n      } = thumb;\n      let isCenter = direction === '';\n      let isCorner = direction.length === 2;\n      if (isCenter) {\n        let {\n          x,\n          y,\n          width,\n          height\n        } = cropBox;\n        let center = [x + width / 2, y + height / 2];\n        setSvgNodeAttrs(interactionNode, {\n          r: Math.min(width, height) / 3,\n          cx: center[0],\n          cy: center[1]\n        });\n      } else {\n        let {\n          d,\n          center\n        } = isCorner ? cornerPath(cropBox, direction) : sidePath(cropBox, direction);\n        setSvgNodeAttrs(interactionNode, {\n          cx: center[0],\n          cy: center[1]\n        });\n        setSvgNodeAttrs(pathNode, {\n          d\n        });\n      }\n      let disableThumb = this._shouldThumbBeDisabled(direction);\n      groupNode.setAttribute('class', classNames('thumb', {\n        'thumb--hidden': disableThumb,\n        'thumb--visible': !disableThumb\n      }));\n    }\n    let frameGuides = this._frameGuides;\n    setSvgNodeAttrs(frameGuides, {\n      x: cropBox.x - GUIDE_STROKE_WIDTH * 0.5,\n      y: cropBox.y - GUIDE_STROKE_WIDTH * 0.5,\n      width: cropBox.width + GUIDE_STROKE_WIDTH,\n      height: cropBox.height + GUIDE_STROKE_WIDTH\n    });\n  }\n  _createThumbs() {\n    let frameThumbs = {};\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        let direction = `${['n', '', 's'][i]}${['w', '', 'e'][j]}`;\n        let groupNode = createSvgNode('g');\n        groupNode.classList.add('thumb');\n        groupNode.setAttribute('with-effects', '');\n        let interactionNode = createSvgNode('circle', {\n          r: THUMB_CORNER_SIZE + THUMB_OFFSET,\n          fill: 'transparent'\n        });\n        let pathNode = createSvgNode('path', {\n          stroke: 'currentColor',\n          fill: 'none',\n          'stroke-width': THUMB_STROKE_WIDTH\n        });\n        groupNode.appendChild(pathNode);\n        groupNode.appendChild(interactionNode);\n        frameThumbs[direction] = {\n          direction,\n          pathNode,\n          interactionNode,\n          groupNode\n        };\n        interactionNode.addEventListener('pointerdown', this._handlePointerDown.bind(this, direction));\n      }\n    }\n    return frameThumbs;\n  }\n  _createGuides() {\n    let svg = createSvgNode('svg');\n    let rect = createSvgNode('rect', {\n      x: 0,\n      y: 0,\n      width: '100%',\n      height: '100%',\n      fill: 'none',\n      stroke: '#000000',\n      'stroke-width': GUIDE_STROKE_WIDTH,\n      'stroke-opacity': 0.5\n    });\n    svg.appendChild(rect);\n    for (let i = 1; i <= 2; i++) {\n      let line = createSvgNode('line', {\n        x1: `${GUIDE_THIRD * i}%`,\n        y1: `0%`,\n        x2: `${GUIDE_THIRD * i}%`,\n        y2: `100%`,\n        stroke: '#000000',\n        'stroke-width': GUIDE_STROKE_WIDTH,\n        'stroke-opacity': 0.3\n      });\n      svg.appendChild(line);\n    }\n    for (let i = 1; i <= 2; i++) {\n      let line = createSvgNode('line', {\n        x1: `0%`,\n        y1: `${GUIDE_THIRD * i}%`,\n        x2: `100%`,\n        y2: `${GUIDE_THIRD * i}%`,\n        stroke: '#000000',\n        'stroke-width': GUIDE_STROKE_WIDTH,\n        'stroke-opacity': 0.3\n      });\n      svg.appendChild(line);\n    }\n    svg.classList.add('guides', 'guides--semi-hidden');\n    return svg;\n  }\n  _createFrame() {\n    let svg = this.ref['svg-el'];\n    let fr = document.createDocumentFragment();\n    let frameGuides = this._createGuides();\n    fr.appendChild(frameGuides);\n    let frameThumbs = this._createThumbs();\n    for (let {\n      groupNode\n    } of Object.values(frameThumbs)) {\n      fr.appendChild(groupNode);\n    }\n    svg.appendChild(fr);\n    this._frameThumbs = frameThumbs;\n    this._frameGuides = frameGuides;\n  }\n  _handlePointerDown(direction, e) {\n    let thumb = this._frameThumbs[direction];\n    if (this._shouldThumbBeDisabled(direction)) {\n      return;\n    }\n    let cropBox = this.$['*cropBox'];\n    let {\n      x: svgX,\n      y: svgY\n    } = this.ref['svg-el'].getBoundingClientRect();\n    let x = e.x - svgX;\n    let y = e.y - svgY;\n    this.$.dragging = true;\n    this._draggingThumb = thumb;\n    this._dragStartPoint = [x, y];\n    /** @type {import('./types.js').Rectangle} */\n    this._dragStartCrop = {\n      ...cropBox\n    };\n  }\n  _handlePointerUp_(e) {\n    this._updateCursor();\n    if (!this.$.dragging) {\n      return;\n    }\n    e.stopPropagation();\n    e.preventDefault();\n    this.$.dragging = false;\n  }\n  _handlePointerMove_(e) {\n    if (!this.$.dragging) {\n      return;\n    }\n    e.stopPropagation();\n    e.preventDefault();\n    let svg = this.ref['svg-el'];\n    let {\n      x: svgX,\n      y: svgY\n    } = svg.getBoundingClientRect();\n    let x = e.x - svgX;\n    let y = e.y - svgY;\n    let dx = x - this._dragStartPoint[0];\n    let dy = y - this._dragStartPoint[1];\n    let {\n      direction\n    } = this._draggingThumb;\n\n    /** @type {import('./types.js').Rectangle} */\n    let imageBox = this.$['*imageBox'];\n    let rect = this._dragStartCrop;\n    if (direction === '') {\n      rect = moveRect(rect, [dx, dy]);\n      rect = constraintRect(rect, imageBox);\n    } else {\n      rect = expandRect(rect, [dx, dy], direction);\n      rect = intersectionRect(rect, imageBox);\n    }\n    /** @type {[Number, Number]} */\n    let minCropRect = [Math.min(imageBox.width, MIN_CROP_SIZE), Math.min(imageBox.height, MIN_CROP_SIZE)];\n    rect = minRectSize(rect, minCropRect, direction);\n    if (!Object.values(rect).every(number => Number.isFinite(number) && number >= 0)) {\n      console.error('CropFrame is trying to create invalid rectangle', {\n        payload: rect\n      });\n      return;\n    }\n    this.$['*cropBox'] = rect;\n  }\n  _handleSvgPointerMove_(e) {\n    let hoverThumb = Object.values(this._frameThumbs).find(thumb => {\n      if (this._shouldThumbBeDisabled(thumb.direction)) {\n        return false;\n      }\n      let node = thumb.groupNode;\n      let bounds = node.getBoundingClientRect();\n      let rect = {\n        x: bounds.x,\n        y: bounds.y,\n        width: bounds.width,\n        height: bounds.height\n      };\n      let hover = rectContainsPoint(rect, [e.x, e.y]);\n      return hover;\n    });\n    this._hoverThumb = hoverThumb;\n    this._updateCursor();\n  }\n  _updateCursor() {\n    let hoverThumb = this._hoverThumb;\n    this.ref['svg-el'].style.cursor = hoverThumb ? thumbCursor(hoverThumb.direction) : 'initial';\n  }\n  _render() {\n    this._updateBackdrop();\n    this._updateFrame();\n  }\n  toggleThumbs(visible) {\n    Object.values(this._frameThumbs).map(({\n      groupNode\n    }) => groupNode).forEach(groupNode => {\n      groupNode.setAttribute('class', classNames('thumb', {\n        'thumb--hidden': !visible,\n        'thumb--visible': visible\n      }));\n    });\n  }\n  initCallback() {\n    super.initCallback();\n    this._createBackdrop();\n    this._createFrame();\n    this.sub('*imageBox', () => {\n      this._resizeBackdrop();\n      window.requestAnimationFrame(() => {\n        this._render();\n      });\n    });\n    this.sub('*cropBox', cropBox => {\n      if (!cropBox) {\n        return;\n      }\n      this._guidesHidden = cropBox.height <= MIN_CROP_SIZE || cropBox.width <= MIN_CROP_SIZE;\n      window.requestAnimationFrame(() => {\n        this._render();\n      });\n    });\n    this.sub('dragging', dragging => {\n      this._frameGuides.setAttribute('class', classNames({\n        'guides--hidden': this._guidesHidden,\n        'guides--visible': !this._guidesHidden && dragging,\n        'guides--semi-hidden': !this._guidesHidden && !dragging\n      }));\n    });\n    this.ref['svg-el'].addEventListener('pointermove', this._handleSvgPointerMove, true);\n    document.addEventListener('pointermove', this._handlePointerMove, true);\n    document.addEventListener('pointerup', this._handlePointerUp, true);\n  }\n  destroyCallback() {\n    super.destroyCallback();\n    document.removeEventListener('pointermove', this._handlePointerMove);\n    document.removeEventListener('pointerup', this._handlePointerUp);\n  }\n}\nCropFrame.template = /* HTML */` <svg class=\"svg\" ref=\"svg-el\" xmlns=\"http://www.w3.org/2000/svg\"></svg> `;","map":{"version":3,"names":["Block","constraintRect","cornerPath","createSvgNode","expandRect","intersectionRect","minRectSize","moveRect","rectContainsPoint","setSvgNodeAttrs","sidePath","thumbCursor","GUIDE_STROKE_WIDTH","GUIDE_THIRD","MIN_CROP_SIZE","THUMB_CORNER_SIZE","THUMB_OFFSET","THUMB_STROKE_WIDTH","classNames","CropFrame","init$","dragging","constructor","_handlePointerUp","_handlePointerUp_","bind","_handlePointerMove","_handlePointerMove_","_handleSvgPointerMove","_handleSvgPointerMove_","_shouldThumbBeDisabled","direction","imageBox","$","height","width","tooHigh","includes","tooWide","_createBackdrop","cropBox","x","y","svg","ref","mask","id","maskRectOuter","fill","maskRectInner","appendChild","backdropRect","_backdropMask","_backdropMaskInner","_resizeBackdrop","style","display","window","requestAnimationFrame","_updateBackdrop","_updateFrame","thumb","Object","values","_frameThumbs","pathNode","interactionNode","groupNode","isCenter","isCorner","length","center","r","Math","min","cx","cy","d","disableThumb","setAttribute","frameGuides","_frameGuides","_createThumbs","frameThumbs","i","j","classList","add","stroke","addEventListener","_handlePointerDown","_createGuides","rect","line","x1","y1","x2","y2","_createFrame","fr","document","createDocumentFragment","e","svgX","svgY","getBoundingClientRect","_draggingThumb","_dragStartPoint","_dragStartCrop","_updateCursor","stopPropagation","preventDefault","dx","dy","minCropRect","every","number","Number","isFinite","console","error","payload","hoverThumb","find","node","bounds","hover","_hoverThumb","cursor","_render","toggleThumbs","visible","map","forEach","initCallback","sub","_guidesHidden","destroyCallback","removeEventListener","template"],"sources":["/Users/David/Documents/own_projects/mp4-to-gif/node_modules/@uploadcare/blocks/blocks/CloudImageEditor/src/CropFrame.js"],"sourcesContent":["import { Block } from '../../../abstract/Block.js';\nimport {\n  constraintRect,\n  cornerPath,\n  createSvgNode,\n  expandRect,\n  intersectionRect,\n  minRectSize,\n  moveRect,\n  rectContainsPoint,\n  setSvgNodeAttrs,\n  sidePath,\n  thumbCursor,\n} from './crop-utils.js';\nimport {\n  GUIDE_STROKE_WIDTH,\n  GUIDE_THIRD,\n  MIN_CROP_SIZE,\n  THUMB_CORNER_SIZE,\n  THUMB_OFFSET,\n  THUMB_STROKE_WIDTH,\n} from './cropper-constants.js';\nimport { classNames } from './lib/classNames.js';\n\nexport class CropFrame extends Block {\n  init$ = {\n    ...this.init$,\n    dragging: false,\n  };\n\n  constructor() {\n    super();\n\n    /** @private */\n    this._handlePointerUp = this._handlePointerUp_.bind(this);\n\n    /** @private */\n    this._handlePointerMove = this._handlePointerMove_.bind(this);\n\n    /** @private */\n    this._handleSvgPointerMove = this._handleSvgPointerMove_.bind(this);\n  }\n\n  _shouldThumbBeDisabled(direction) {\n    let imageBox = this.$['*imageBox'];\n    if (!imageBox) {\n      return;\n    }\n\n    if (direction === '' && imageBox.height <= MIN_CROP_SIZE && imageBox.width <= MIN_CROP_SIZE) {\n      return true;\n    }\n\n    let tooHigh = imageBox.height <= MIN_CROP_SIZE && (direction.includes('n') || direction.includes('s'));\n    let tooWide = imageBox.width <= MIN_CROP_SIZE && (direction.includes('e') || direction.includes('w'));\n    return tooHigh || tooWide;\n  }\n\n  _createBackdrop() {\n    /** @type {import('./types.js').Rectangle} */\n    let cropBox = this.$['*cropBox'];\n    if (!cropBox) {\n      return;\n    }\n    let { x, y, width, height } = cropBox;\n    let svg = this.ref['svg-el'];\n\n    let mask = createSvgNode('mask', { id: 'backdrop-mask' });\n    let maskRectOuter = createSvgNode('rect', {\n      x: 0,\n      y: 0,\n      width: '100%',\n      height: '100%',\n      fill: 'white',\n    });\n    let maskRectInner = createSvgNode('rect', {\n      x,\n      y,\n      width,\n      height,\n      fill: 'black',\n    });\n    mask.appendChild(maskRectOuter);\n    mask.appendChild(maskRectInner);\n\n    let backdropRect = createSvgNode('rect', {\n      x: 0,\n      y: 0,\n      width: '100%',\n      height: '100%',\n      fill: 'var(--color-image-background)',\n      'fill-opacity': 0.85,\n      mask: 'url(#backdrop-mask)',\n    });\n    svg.appendChild(backdropRect);\n    svg.appendChild(mask);\n\n    this._backdropMask = mask;\n    this._backdropMaskInner = maskRectInner;\n  }\n\n  /** Super tricky workaround for the chromium bug See https://bugs.chromium.org/p/chromium/issues/detail?id=330815 */\n  _resizeBackdrop() {\n    if (!this._backdropMask) {\n      return;\n    }\n    this._backdropMask.style.display = 'none';\n    window.requestAnimationFrame(() => {\n      this._backdropMask.style.display = 'block';\n    });\n  }\n\n  _updateBackdrop() {\n    /** @type {import('./types.js').Rectangle} */\n    let cropBox = this.$['*cropBox'];\n    if (!cropBox) {\n      return;\n    }\n    let { x, y, width, height } = cropBox;\n\n    setSvgNodeAttrs(this._backdropMaskInner, { x, y, width, height });\n  }\n\n  _updateFrame() {\n    /** @type {import('./types.js').Rectangle} */\n    let cropBox = this.$['*cropBox'];\n    if (!cropBox) {\n      return;\n    }\n    for (let thumb of Object.values(this._frameThumbs)) {\n      let { direction, pathNode, interactionNode, groupNode } = thumb;\n      let isCenter = direction === '';\n      let isCorner = direction.length === 2;\n\n      if (isCenter) {\n        let { x, y, width, height } = cropBox;\n        let center = [x + width / 2, y + height / 2];\n        setSvgNodeAttrs(interactionNode, {\n          r: Math.min(width, height) / 3,\n          cx: center[0],\n          cy: center[1],\n        });\n      } else {\n        let { d, center } = isCorner ? cornerPath(cropBox, direction) : sidePath(cropBox, direction);\n        setSvgNodeAttrs(interactionNode, { cx: center[0], cy: center[1] });\n        setSvgNodeAttrs(pathNode, { d });\n      }\n\n      let disableThumb = this._shouldThumbBeDisabled(direction);\n      groupNode.setAttribute(\n        'class',\n        classNames('thumb', {\n          'thumb--hidden': disableThumb,\n          'thumb--visible': !disableThumb,\n        })\n      );\n    }\n\n    let frameGuides = this._frameGuides;\n    setSvgNodeAttrs(frameGuides, {\n      x: cropBox.x - GUIDE_STROKE_WIDTH * 0.5,\n      y: cropBox.y - GUIDE_STROKE_WIDTH * 0.5,\n      width: cropBox.width + GUIDE_STROKE_WIDTH,\n      height: cropBox.height + GUIDE_STROKE_WIDTH,\n    });\n  }\n\n  _createThumbs() {\n    let frameThumbs = {};\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        let direction = `${['n', '', 's'][i]}${['w', '', 'e'][j]}`;\n        let groupNode = createSvgNode('g');\n        groupNode.classList.add('thumb');\n        groupNode.setAttribute('with-effects', '');\n        let interactionNode = createSvgNode('circle', {\n          r: THUMB_CORNER_SIZE + THUMB_OFFSET,\n          fill: 'transparent',\n        });\n        let pathNode = createSvgNode('path', {\n          stroke: 'currentColor',\n          fill: 'none',\n          'stroke-width': THUMB_STROKE_WIDTH,\n        });\n        groupNode.appendChild(pathNode);\n        groupNode.appendChild(interactionNode);\n        frameThumbs[direction] = {\n          direction,\n          pathNode,\n          interactionNode,\n          groupNode,\n        };\n\n        interactionNode.addEventListener('pointerdown', this._handlePointerDown.bind(this, direction));\n      }\n    }\n\n    return frameThumbs;\n  }\n\n  _createGuides() {\n    let svg = createSvgNode('svg');\n\n    let rect = createSvgNode('rect', {\n      x: 0,\n      y: 0,\n      width: '100%',\n      height: '100%',\n      fill: 'none',\n      stroke: '#000000',\n      'stroke-width': GUIDE_STROKE_WIDTH,\n      'stroke-opacity': 0.5,\n    });\n    svg.appendChild(rect);\n\n    for (let i = 1; i <= 2; i++) {\n      let line = createSvgNode('line', {\n        x1: `${GUIDE_THIRD * i}%`,\n        y1: `0%`,\n        x2: `${GUIDE_THIRD * i}%`,\n        y2: `100%`,\n        stroke: '#000000',\n        'stroke-width': GUIDE_STROKE_WIDTH,\n        'stroke-opacity': 0.3,\n      });\n      svg.appendChild(line);\n    }\n\n    for (let i = 1; i <= 2; i++) {\n      let line = createSvgNode('line', {\n        x1: `0%`,\n        y1: `${GUIDE_THIRD * i}%`,\n        x2: `100%`,\n        y2: `${GUIDE_THIRD * i}%`,\n        stroke: '#000000',\n        'stroke-width': GUIDE_STROKE_WIDTH,\n        'stroke-opacity': 0.3,\n      });\n      svg.appendChild(line);\n    }\n\n    svg.classList.add('guides', 'guides--semi-hidden');\n\n    return svg;\n  }\n\n  _createFrame() {\n    let svg = this.ref['svg-el'];\n    let fr = document.createDocumentFragment();\n\n    let frameGuides = this._createGuides();\n    fr.appendChild(frameGuides);\n\n    let frameThumbs = this._createThumbs();\n    for (let { groupNode } of Object.values(frameThumbs)) {\n      fr.appendChild(groupNode);\n    }\n\n    svg.appendChild(fr);\n    this._frameThumbs = frameThumbs;\n    this._frameGuides = frameGuides;\n  }\n\n  _handlePointerDown(direction, e) {\n    let thumb = this._frameThumbs[direction];\n    if (this._shouldThumbBeDisabled(direction)) {\n      return;\n    }\n\n    let cropBox = this.$['*cropBox'];\n    let { x: svgX, y: svgY } = this.ref['svg-el'].getBoundingClientRect();\n    let x = e.x - svgX;\n    let y = e.y - svgY;\n\n    this.$.dragging = true;\n    this._draggingThumb = thumb;\n    this._dragStartPoint = [x, y];\n    /** @type {import('./types.js').Rectangle} */\n    this._dragStartCrop = { ...cropBox };\n  }\n\n  _handlePointerUp_(e) {\n    this._updateCursor();\n\n    if (!this.$.dragging) {\n      return;\n    }\n    e.stopPropagation();\n    e.preventDefault();\n\n    this.$.dragging = false;\n  }\n\n  _handlePointerMove_(e) {\n    if (!this.$.dragging) {\n      return;\n    }\n    e.stopPropagation();\n    e.preventDefault();\n\n    let svg = this.ref['svg-el'];\n    let { x: svgX, y: svgY } = svg.getBoundingClientRect();\n    let x = e.x - svgX;\n    let y = e.y - svgY;\n    let dx = x - this._dragStartPoint[0];\n    let dy = y - this._dragStartPoint[1];\n    let { direction } = this._draggingThumb;\n\n    /** @type {import('./types.js').Rectangle} */\n    let imageBox = this.$['*imageBox'];\n    let rect = this._dragStartCrop;\n\n    if (direction === '') {\n      rect = moveRect(rect, [dx, dy]);\n      rect = constraintRect(rect, imageBox);\n    } else {\n      rect = expandRect(rect, [dx, dy], direction);\n      rect = intersectionRect(rect, imageBox);\n    }\n    /** @type {[Number, Number]} */\n    let minCropRect = [Math.min(imageBox.width, MIN_CROP_SIZE), Math.min(imageBox.height, MIN_CROP_SIZE)];\n    rect = minRectSize(rect, minCropRect, direction);\n\n    if (!Object.values(rect).every((number) => Number.isFinite(number) && number >= 0)) {\n      console.error('CropFrame is trying to create invalid rectangle', {\n        payload: rect,\n      });\n      return;\n    }\n    this.$['*cropBox'] = rect;\n  }\n\n  _handleSvgPointerMove_(e) {\n    let hoverThumb = Object.values(this._frameThumbs).find((thumb) => {\n      if (this._shouldThumbBeDisabled(thumb.direction)) {\n        return false;\n      }\n      let node = thumb.groupNode;\n      let bounds = node.getBoundingClientRect();\n      let rect = {\n        x: bounds.x,\n        y: bounds.y,\n        width: bounds.width,\n        height: bounds.height,\n      };\n      let hover = rectContainsPoint(rect, [e.x, e.y]);\n      return hover;\n    });\n\n    this._hoverThumb = hoverThumb;\n    this._updateCursor();\n  }\n\n  _updateCursor() {\n    let hoverThumb = this._hoverThumb;\n    this.ref['svg-el'].style.cursor = hoverThumb ? thumbCursor(hoverThumb.direction) : 'initial';\n  }\n\n  _render() {\n    this._updateBackdrop();\n    this._updateFrame();\n  }\n\n  toggleThumbs(visible) {\n    Object.values(this._frameThumbs)\n      .map(({ groupNode }) => groupNode)\n      .forEach((groupNode) => {\n        groupNode.setAttribute(\n          'class',\n          classNames('thumb', {\n            'thumb--hidden': !visible,\n            'thumb--visible': visible,\n          })\n        );\n      });\n  }\n\n  initCallback() {\n    super.initCallback();\n\n    this._createBackdrop();\n    this._createFrame();\n\n    this.sub('*imageBox', () => {\n      this._resizeBackdrop();\n      window.requestAnimationFrame(() => {\n        this._render();\n      });\n    });\n\n    this.sub('*cropBox', (cropBox) => {\n      if (!cropBox) {\n        return;\n      }\n      this._guidesHidden = cropBox.height <= MIN_CROP_SIZE || cropBox.width <= MIN_CROP_SIZE;\n      window.requestAnimationFrame(() => {\n        this._render();\n      });\n    });\n\n    this.sub('dragging', (dragging) => {\n      this._frameGuides.setAttribute(\n        'class',\n        classNames({\n          'guides--hidden': this._guidesHidden,\n          'guides--visible': !this._guidesHidden && dragging,\n          'guides--semi-hidden': !this._guidesHidden && !dragging,\n        })\n      );\n    });\n\n    this.ref['svg-el'].addEventListener('pointermove', this._handleSvgPointerMove, true);\n    document.addEventListener('pointermove', this._handlePointerMove, true);\n    document.addEventListener('pointerup', this._handlePointerUp, true);\n  }\n\n  destroyCallback() {\n    super.destroyCallback();\n\n    document.removeEventListener('pointermove', this._handlePointerMove);\n    document.removeEventListener('pointerup', this._handlePointerUp);\n  }\n}\n\nCropFrame.template = /* HTML */ ` <svg class=\"svg\" ref=\"svg-el\" xmlns=\"http://www.w3.org/2000/svg\"></svg> `;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}